{"version":3,"sources":["EditableSpan.module.css","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","inputValue","setInputValue","error","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","title","taskTitle","setTaskTitle","className","classes","inputField","autoFocus","onBlur","changeTitle","placeholder","size","onDoubleClick","TodoList","tasksElements","tasks","map","t","isDoneClassName","isDone","id","Checkbox","checked","changeTaskStatus","newTitle","changeTaskTitle","deleteTask","Delete","todoListTitle","changeTodoListTitle","deleteTodoList","addTask","Button","filter","undefined","style","marginTop","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListId","newTodoLists","tl","filterValue","todoList","find","updatedTodoLists","newTasks","taskId","updatedTasks","todoListJSXElements","allTodoListTasks","filteredTasks","Grid","item","wordBreak","Paper","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListId","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f7f28e85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"EditableSpan_inputField__2zjDg\",\"error\":\"EditableSpan_error__7i9XP\"};","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n    //local input state\r\n    const [inputValue, setInputValue] = useState('')\r\n    //local error state\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    //add task or todolist based on callback\r\n    const addItem = () => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addItem(inputValue.trim())\r\n            setInputValue('')\r\n        } else {\r\n            setError('Title required')\r\n        }\r\n    }\r\n\r\n    const onEnterPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    //input value flux changer\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={!!error}\r\n                value={inputValue}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color='primary' onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from './EditableSpan.module.css'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n    //editMode for span local state\r\n    const [editMode, setEditMode] = useState(false)\r\n    //title local state\r\n    const [taskTitle, setTaskTitle] = useState(props.title)\r\n    //local error state for input\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onDoubleClickOnEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onBlurOffEditMode = () => {\r\n        if (taskTitle !== '') {\r\n            setEditMode(false)\r\n            props.changeTitle(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (taskTitle !== '') {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                props.changeTitle(taskTitle)\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    //conditional rendering of span or input field\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                className={`${classes.inputField} ${error ? classes.error : ''}`}\r\n                autoFocus\r\n                value={taskTitle}\r\n                onBlur={onBlurOffEditMode}\r\n                onKeyPress={onEnterPressOffEditMode}\r\n                onChange={onChangeTaskTitle}\r\n                placeholder={error ? 'please enter title' : ''}\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                error={error}/>\r\n            : <span onDoubleClick={onDoubleClickOnEditMode}>{taskTitle}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType, TaskType} from \"./App\";\r\nimport './TodoList.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    todoListTitle: string\r\n    filter: FilterValueType\r\n    tasks: TaskType[]\r\n    deleteTodoList: (todoListId: string) => void\r\n    deleteTask: (id: string, todoListId: string) => void\r\n    changeFilter: (filter: FilterValueType, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (todoListId: string, taskId: string, newTitle: string) => void\r\n    addTask: (taskTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n    //render tasks\r\n    let tasksElements = props.tasks.map(t => {\r\n        const isDoneClassName = t.isDone ? \"isDone\" : \"\"\r\n        const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const onClickDeleteTask = () => {\r\n            props.deleteTask(t.id, props.id)\r\n        }\r\n        const changeTaskTitle = (newTitle: string) => {\r\n            props.changeTaskTitle(props.id, t.id, newTitle)\r\n        }\r\n\r\n        return (\r\n            <div key={t.id} className={isDoneClassName}>\r\n                <Checkbox checked={t.isDone} onChange={onChangeTaskStatus} color={\"primary\"}/>\r\n                {/*<input type=\"checkbox\" checked={t.isDone} onChange={onChangeTaskStatus}/>*/}\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <IconButton onClick={onClickDeleteTask}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </div>)\r\n    })\r\n\r\n    //add task\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    //deleting todolist entity\r\n    const deleteTodoList = () => {\r\n        props.deleteTodoList(props.id)\r\n    }\r\n\r\n    //changeTodoListTitle\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n\r\n\r\n    //filter callbacks\r\n    const onChangeFilterAll = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n\r\n    const onChangeFilterAActive = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n\r\n    const onChangeFilterCompleted = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n\r\n    // classnames for buttons based on filter value\r\n    // const allClassName = props.filter === \"all\" ? \"filterButtonActive\" : \"filterButton\"\r\n    // const activeClassName = props.filter === \"active\" ? \"filterButtonActive\" : \"filterButton\"\r\n    // const completedClassName = props.filter === \"completed\" ? \"filterButtonActive\" : \"filterButton\"\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.todoListTitle} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={deleteTodoList}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasksElements}\r\n            </div>\r\n            <div>\r\n                <Button color=\"primary\" variant={props.filter === \"all\" ? \"contained\" : undefined} style={{marginTop: '3px'}} onClick={onChangeFilterAll}>All</Button>\r\n                <Button color=\"primary\" variant={props.filter === \"active\" ? \"contained\" : undefined} style={{marginTop: '3px'}} onClick={onChangeFilterAActive}>Active</Button>\r\n                <Button color=\"primary\" variant={props.filter === \"completed\" ? \"contained\" : undefined} style={{marginTop: '3px'}} onClick={onChangeFilterCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from \"uuid\";\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport type FilterValueType = 'all' | 'completed' | 'active'\r\n\r\nfunction App() {\r\n    //local state of todoLists\r\n    const todoListId1 = v1()\r\n    const todoListId2 = v1()\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {\r\n            id: todoListId1,\r\n            title: 'What to learn',\r\n            filter: 'all'\r\n        },\r\n        {\r\n            id: todoListId2,\r\n            title: 'What to buy',\r\n            filter: 'all'\r\n        },\r\n    ])\r\n\r\n    //local state of tasks\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n            [todoListId1]: [\r\n                {id: v1(), title: 'HTML&CSS', isDone: true},\r\n                {id: v1(), title: 'JS/TS', isDone: true},\r\n                {id: v1(), title: 'React', isDone: false},\r\n                {id: v1(), title: 'Redux', isDone: false},\r\n            ],\r\n            [todoListId2]: [\r\n                {id: v1(), title: 'Time', isDone: true},\r\n                {id: v1(), title: 'Brain', isDone: true},\r\n                {id: v1(), title: 'Car', isDone: false},\r\n                {id: v1(), title: 'Penthouse', isDone: false},\r\n            ]\r\n        }\r\n    )\r\n\r\n    //adding TodoList\r\n    const addTodoList = (todoListTitle: string) => {\r\n        const newTodoListId = v1()\r\n        const newTodoList: TodoListType = {id: newTodoListId, title: todoListTitle, filter: 'all'}\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n\r\n    //removing TodoList\r\n    const deleteTodoList = (todoListId: string) => {\r\n        let newTodoLists = todoLists.filter(tl => tl.id !== todoListId)\r\n        setTodoLists(newTodoLists)\r\n        delete tasks[todoListId]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    //change filter\r\n    const changeFilter = (filterValue: FilterValueType, todoListId: string) => {\r\n        let todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) {\r\n            todoList.filter = filterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    //change todolist title\r\n    const changeTodoListTitle = (todoListId: string, newTitle: string) => {\r\n        const updatedTodoLists = todoLists.map(tl => tl.id === todoListId ? {...tl, title: newTitle} : tl)\r\n        setTodoLists(updatedTodoLists)\r\n    }\r\n\r\n    //deleting task\r\n    const deleteTask = (id: string, todoListId: string) => {\r\n        let todoListTasks = tasks[todoListId]\r\n        let newTasks = todoListTasks.filter(t => t.id !== id)\r\n        setTasks({...tasks, [todoListId]: newTasks})\r\n    }\r\n\r\n    //adding a task\r\n    const addTask = (taskTitle: string, todoListId: string) => {\r\n        if (taskTitle.trim() !== '') {\r\n            const newTasks = [{id: v1(), title: taskTitle, isDone: false}, ...tasks[todoListId]]\r\n            setTasks({...tasks, [todoListId]: newTasks})\r\n        }\r\n    }\r\n\r\n    //change task status\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        const updatedTasks = tasks[todoListId].map(t => t.id === taskId ? {...t, isDone} : t)\r\n        setTasks({...tasks, [todoListId]: updatedTasks})\r\n    }\r\n\r\n    //task title change\r\n    const changeTaskTitle = (todoListId: string, taskId: string, newTitle: string) => {\r\n        const updatedTasks = tasks[todoListId].map(t => t.id === taskId ? {...t, title: newTitle} : t)\r\n        setTasks({...tasks, [todoListId]: updatedTasks})\r\n    }\r\n\r\n    const todoListJSXElements = todoLists.map(tl => {\r\n            let allTodoListTasks = tasks[tl.id]\r\n            let filteredTasks = allTodoListTasks;\r\n            if (tl.filter === 'active') {\r\n                filteredTasks = allTodoListTasks.filter(t => !t.isDone)\r\n            }\r\n            if (tl.filter === 'completed') {\r\n                filteredTasks = allTodoListTasks.filter(t => t.isDone)\r\n            }\r\n            return (\r\n                <Grid item style={{wordBreak: 'break-word'}}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <TodoList\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            todoListTitle={tl.title}\r\n                            filter={tl.filter}\r\n                            tasks={filteredTasks}\r\n                            deleteTodoList={deleteTodoList}\r\n                            deleteTask={deleteTask}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            addTask={addTask}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px', justifyContent: 'center'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3} style={{justifyContent: 'center'}}>\r\n                    {todoListJSXElements}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}