{"version":3,"sources":["serviceWorker.ts","api/api.ts","state/todolist-reducer.ts","utils/error-utils.ts","state/auth-reducer.ts","state/app-reducer.ts","components/errorSnackbar/ErrorSnackbar.tsx","components/login/Login.tsx","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","state/tasks-reducer.ts","components/taskComponent/Task.tsx","components/todolistComponent/TodoList.tsx","components/todolists-container/TodoListsContainer.tsx","App.tsx","state/store.ts","index.tsx","components/editableSpan/EditableSpan.module.css","components/taskComponent/Task.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","data","initState","changeTodoListFilterAC","filter","todoListId","type","changeTodoListTitleAC","newTitle","changeTodoListEntityStatusAC","todoId","todoListEntityStatus","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerAppNetworkError","message","handleServerTodoEntityError","handleServerTodoEntityNetworkError","isLoggedIn","setIsLoggedInAC","status","error","isInitialized","Alert","props","elevation","variant","ErrorSnackbar","appSnackbarError","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","React","memo","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","a","res","resultCode","resetForm","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","AddItemForm","useState","inputValue","setInputValue","setError","addItem","trim","size","value","onChange","e","currentTarget","onBlur","onKeyPress","key","helperText","disabled","IconButton","onClick","AddBox","EditableSpan","changeTitle","editMode","setEditMode","setTaskTitle","className","classes","inputField","autoFocus","placeholder","onDoubleClick","fetchTasksAC","tasks","deleteTaskAC","changeTaskStatusAC","changeTaskTitleAC","Task","changeTaskTitle","useCallback","getState","task","find","t","description","priority","startDate","deadline","changeTaskTitleTC","liElement","isDoneClassName","changeTaskStatusTC","Completed","New","taskID","deleteTaskTC","Delete","TodoList","todoListTitle","useEffect","items","tasksElements","map","changeTodoListTitle","allVariant","undefined","activeVariant","completedVariant","deleteTodoListTC","marginTop","TodoListsContainer","todoLists","addTodoList","todoList","todoListJSXElements","tl","wordBreak","Paper","padding","justifyContent","spacing","useStyles","makeStyles","theme","backdrop","zIndex","drawer","App","logout","Backdrop","CircularProgress","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","exact","path","render","textAlign","from","top","width","rootReducer","combineReducers","action","stateCopy","forEach","console","log","todoEntity","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.c6f4da01.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd54d3622-f03b-45b2-9f0a-fa6f5f4405c5'\r\n    }\r\n})\r\n\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodoListType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    //tasks requests\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n    //auth requests\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType | {}>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}","import {todoListsAPI, TodoListType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {UnionActionType} from \"./action-types\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerAppNetworkError,\r\n    handleServerTodoEntityError,\r\n    handleServerTodoEntityNetworkError\r\n} from \"../utils/error-utils\";\r\n\r\n//local types\r\nexport type TodoListEntityType = TodoListType & {\r\n    filter: FilterValueType,\r\n    todoListEntityStatus: RequestStatusType\r\n}\r\nexport type FilterValueType = 'all' | 'completed' | 'active'\r\n\r\n//init state\r\nconst initState: TodoListEntityType[] = []\r\n\r\n//reducer\r\nexport const todolistReducer = (state: TodoListEntityType[] = initState, action: UnionActionType): TodoListEntityType[] => {\r\n    switch (action.type) {\r\n        case \"todo/SET-TODO-LISTS\": {\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', todoListEntityStatus: 'idle'}))\r\n        }\r\n        case \"todo/ADD-TODOLIST\": {\r\n            let todoEntity: TodoListEntityType = {...action.todoList, filter: 'all', todoListEntityStatus: 'idle'}\r\n            return [todoEntity, ...state]\r\n        }\r\n        case \"todo/DELETE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n        }\r\n        case \"todo/CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case \"todo/CHANGE-TODOLIST-TITLE\": {\r\n            debugger\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.newTitle} : tl)\r\n        }\r\n        case \"todo/CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n            return state.map(tl => tl.id === action.todoId ? {...tl, todoListEntityStatus: action.todoListEntityStatus} : tl)\r\n        }\r\n        case \"todo/CLEAR-DATA\": {\r\n            return []\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const fetchTodoListsAC = (todoLists: TodoListType[]) => {\r\n    return {type: \"todo/SET-TODO-LISTS\", todoLists} as const\r\n}\r\nexport const addTodoListAC = (todoList: TodoListType) => {\r\n    return {type: \"todo/ADD-TODOLIST\", todoList} as const\r\n}\r\nexport const deleteTodoListAC = (todoListId: string) => {\r\n    return {type: \"todo/DELETE-TODOLIST\", todoListId} as const\r\n}\r\nexport const changeTodoListFilterAC = (filter: FilterValueType, todoListId: string) => {\r\n    return {type: \"todo/CHANGE-TODOLIST-FILTER\", filter, todoListId} as const\r\n}\r\nexport const changeTodoListTitleAC = (todoListId: string, newTitle: string) => {\r\n    return {type: \"todo/CHANGE-TODOLIST-TITLE\", todoListId, newTitle} as const\r\n}\r\nexport const changeTodoListEntityStatusAC = (todoId: string, todoListEntityStatus: RequestStatusType) => {\r\n    return {type: \"todo/CHANGE-TODOLIST-ENTITY-STATUS\", todoId, todoListEntityStatus} as const\r\n}\r\nexport const clearDataOnLogoutAC = () => {\r\n    return {type: \"todo/CLEAR-DATA\"} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = () => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.getTodoLists()\r\n        dispatch(fetchTodoListsAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTodoListAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n\r\n}\r\n\r\nexport const deleteTodoListTC = (id: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.deleteTodolist(id)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(deleteTodoListAC(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, newTitle: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, 'loading'))\r\n        const res = await todoListsAPI.updateTodolist(todoListId, newTitle)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(changeTodoListTitleAC(todoListId, newTitle))\r\n            dispatch(changeTodoListEntityStatusAC(todoListId, 'succeeded'))\r\n        } else {\r\n            handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n        }\r\n    } catch (err) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from \"../state/app-reducer\";\r\nimport {changeTodoListEntityStatusAC} from \"../state/todolist-reducer\";\r\nimport {SetAppStatusAT, SetAppErrorAT} from \"../state/action-types\";\r\nimport {ChangeTodoListEntityStatusAT} from \"../state/action-types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/api\";\r\n\r\n//errors for whole app (backdrop)\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('unexpected error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppNetworkError = (message: string, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n//errors for todoListEntity\r\nexport const handleServerTodoEntityError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType, todoId: string) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('unexpected error occurred'))\r\n    }\r\n    dispatch(changeTodoListEntityStatusAC(todoId, 'failed'))\r\n}\r\n\r\nexport const handleServerTodoEntityNetworkError = (message: string, dispatch: ErrorUtilsDispatchType, todoId: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(changeTodoListEntityStatusAC(todoId, 'failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppStatusAT | SetAppErrorAT | ChangeTodoListEntityStatusAT>","import {UnionActionType} from \"./action-types\";\r\nimport {LoginParamsType, todoListsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerAppNetworkError} from \"../utils/error-utils\";\r\nimport {clearDataOnLogoutAC} from \"./todolist-reducer\";\r\n\r\n//local types\r\ntype InitStateType = typeof initState\r\n\r\n//init state\r\nconst initState = {\r\n    isLoggedIn: false\r\n}\r\n\r\n//reducer\r\nexport const authReducer = (state: InitStateType = initState, action: UnionActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET-IS-LOGGED-IN\": {\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => {\r\n    return {type: 'auth/SET-IS-LOGGED-IN', isLoggedIn} as const\r\n}\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(clearDataOnLogoutAC())\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n","import {UnionActionType} from \"./action-types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppNetworkError} from \"../utils/error-utils\";\r\nimport {todoListsAPI} from \"../api/api\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\n\r\n//local types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitStateType = typeof initState\r\n\r\n//init state\r\nconst initState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\n//reducer\r\nexport const appReducer = (state: InitStateType = initState, action: UnionActionType) => {\r\n    switch (action.type) {\r\n        case 'app/SET-STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'app/SET-ERROR': {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"app/SET-APP-INIT\": {\r\n            return {...state, isInitialized: action.isInitialized}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'app/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'app/SET-ERROR', error} as const\r\n}\r\nexport const setAppInitAC = (isInitialized: boolean) => {\r\n    return {type: 'app/SET-APP-INIT', isInitialized} as const\r\n}\r\n\r\n//thunks\r\nexport const initializeAppTC = () => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    } finally {\r\n        dispatch(setAppInitAC(true))\r\n    }\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const appSnackbarError = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={appSnackbarError !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {appSnackbarError}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../state/auth-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype LoginFormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = React.memo(function LoginComponent() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginFormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Field is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Field is required'\r\n            } else if(!/^(?=.{10,}$)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?\\W).*$/i.test(values.password)) { //at least 8 characters, 1 number, 1 upper and 1 lowercase\r\n                errors.password = 'at least 8 characters, 1 number, 1 uppercase character, 1 lowercase character, 1 special character'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    //redirect if logged in\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/todo-list-solo-redo'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify={'center'}>\r\n            <Grid item xs={3}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in please register\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'} rel={'noopener noreferrer'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.errors.email && formik.touched.email && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.errors.password && formik.touched.password && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function AddItemForm(props: AddItemFormType) {\r\n    //local input state\r\n    const [inputValue, setInputValue] = useState('')\r\n    //local error state\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onBlurErrorFalse = () => {\r\n        if(error !== null) setError(null)\r\n    }\r\n    //add task or todolist based on callback\r\n    const addItem = () => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addItem(inputValue.trim())\r\n            setInputValue('')\r\n        } else {\r\n            setError('Title required')\r\n        }\r\n    }\r\n\r\n    const onEnterPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    //input value flux changer\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                error={!!error}\r\n                value={inputValue}\r\n                onChange={onChangeTitle}\r\n                onBlur={onBlurErrorFalse}\r\n                onKeyPress={onEnterPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color='primary' onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from './EditableSpan.module.css'\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function EditableSpanComponent({title, changeTitle, disabled}: EditableSpanType) {\r\n    //editMode for span local state\r\n    const [editMode, setEditMode] = useState(false)\r\n    //title local state\r\n    const [taskTitle, setTaskTitle] = useState(title)\r\n    //local error state for input\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onDoubleClickOnEditMode = () => {\r\n        if (!disabled) {\r\n            if (taskTitle !== title) {\r\n                setTaskTitle(title)\r\n            }\r\n            setEditMode(true)\r\n        }\r\n    }\r\n\r\n    const onBlurOffEditMode = () => {\r\n        if (taskTitle !== '') {\r\n            setEditMode(false)\r\n            changeTitle(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (taskTitle !== '') {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                changeTitle(taskTitle)\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    //conditional rendering of span or input field\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                className={`${classes.inputField} ${error ? classes.error : ''}`}\r\n                autoFocus\r\n                value={taskTitle}\r\n                onBlur={onBlurOffEditMode}\r\n                onKeyPress={onEnterPressOffEditMode}\r\n                onChange={onChangeTaskTitle}\r\n                placeholder={error ? 'please enter title' : ''}\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                error={error}/>\r\n            : <span onDoubleClick={onDoubleClickOnEditMode}>{title}</span>\r\n    )\r\n})","import {TaskStatuses, TaskType, todoListsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {UnionActionType} from \"./action-types\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {changeTodoListEntityStatusAC} from \"./todolist-reducer\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerAppNetworkError,\r\n    handleServerTodoEntityError,\r\n    handleServerTodoEntityNetworkError\r\n} from \"../utils/error-utils\";\r\n\r\n//local types\r\ntype TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\n//init state\r\nconst initState = {}\r\n\r\n//reducer\r\nexport const tasksReducer = (state: TasksStateType = initState, action: UnionActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"todo/SET-TODO-LISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        }\r\n        case \"todo/ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoList.id] = []\r\n            return stateCopy\r\n        }\r\n        case \"todo/DELETE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            console.log(stateCopy)\r\n            return stateCopy\r\n        }\r\n        case \"tasks/SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case \"tasks/ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            stateCopy[action.task.todoListId] = [action.task, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case \"tasks/DELETE-TASK\":\r\n            return {\r\n                ...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case \"tasks/CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)\r\n            }\r\n        case \"tasks/CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.newTitle\r\n                } : t)\r\n            }\r\n        case \"todo/CLEAR-DATA\": {\r\n            return {}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const fetchTasksAC = (tasks: TaskType[], todoListId: string) => {\r\n    return {type: \"tasks/SET-TASKS\", tasks, todoListId} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: \"tasks/ADD-TASK\", task} as const\r\n}\r\nexport const deleteTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: \"tasks/DELETE-TASK\", taskId, todoListId} as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, todoListId: string, status: TaskStatuses) => {\r\n    return {type: \"tasks/CHANGE-TASK-STATUS\", taskId, todoListId, status} as const\r\n}\r\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, newTitle: string) => {\r\n    return {type: \"tasks/CHANGE-TASK-TITLE\", todoListId, taskId, newTitle} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.getTasks(todoListId)\r\n        dispatch(fetchTasksAC(res.data.items, todoListId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (taskTitle: string, todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.createTask(todoListId, taskTitle)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (taskID: string, todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.deleteTask(todoListId, taskID)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(deleteTaskAC(taskID, todoListId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusTC = (taskId: string, todoListId: string, status: TaskStatuses) => async (dispatch: Dispatch<UnionActionType>, getState: () => AppRootStateType) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, 'loading'))\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline\r\n            }\r\n            const res = await todoListsAPI.updateTask(todoListId, taskId, model)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTaskStatusAC(taskId, todoListId, status))\r\n                dispatch(changeTodoListEntityStatusAC(todoListId, 'succeeded'))\r\n            } else {\r\n                handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n            }\r\n        }\r\n    } catch (err) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (taskId: string, todoListId: string, title: string) => async (dispatch: Dispatch<UnionActionType>, getState: () => AppRootStateType) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, 'loading'))\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model = {\r\n                title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline\r\n            }\r\n            const res = await todoListsAPI.updateTask(todoListId, taskId, model)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTaskTitleAC(todoListId, taskId, title))\r\n                dispatch(changeTodoListEntityStatusAC(todoListId, 'succeeded'))\r\n            } else {\r\n                handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n            }\r\n        }\r\n    } catch (err) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport classes from './Task.module.css'\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeTaskStatusTC, changeTaskTitleTC, deleteTaskTC} from \"../../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/api\";\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    title: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n    todoListEntityStatus: boolean\r\n}\r\n\r\nexport const Task = React.memo(function TaskComponent({id, title, status, todoListId, todoListEntityStatus}: TaskPropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusTC(id, todoListId, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New))\r\n    }\r\n    const onClickDeleteTask = () => {\r\n        dispatch(deleteTaskTC(id, todoListId))\r\n    }\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        dispatch(changeTaskTitleTC(id, todoListId, newTitle))\r\n    }, [dispatch, todoListId, id])\r\n\r\n    return (\r\n        <li key={id} className={`${classes.liElement} ${status === 2 ? classes.isDoneClassName : ''}`}>\r\n            <Checkbox checked={status === 2} onChange={onChangeTaskStatus} color={\"primary\"} disabled={todoListEntityStatus}/>\r\n            <EditableSpan title={title} changeTitle={changeTaskTitle} disabled={todoListEntityStatus}/>\r\n            <IconButton onClick={onClickDeleteTask} disabled={todoListEntityStatus}>\r\n                <Delete />\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport './TodoList.css'\r\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {addTaskTC, fetchTasksTC} from \"../../state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    deleteTodoListTC,\r\n    FilterValueType,\r\n} from \"../../state/todolist-reducer\";\r\nimport {Task} from \"../taskComponent/Task\";\r\nimport {TaskType} from \"../../api/api\";\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    todoListTitle: string\r\n    filter: FilterValueType\r\n    todoListEntityStatus: RequestStatusType\r\n}\r\n\r\nexport const TodoList = React.memo(function TodoListWithHooksComponent(props: TodoListPropsType) {\r\n    const {id, todoListTitle, filter, todoListEntityStatus} = props;\r\n    const dispatch = useDispatch()\r\n\r\n    //fetching tasks\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(id))\r\n    }, [dispatch, id])\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => {\r\n        switch (filter) {\r\n            case \"active\":\r\n                return state.tasks[id].filter(t => t.status === 0)\r\n            case \"completed\":\r\n                return state.tasks[id].filter(t => t.status === 2)\r\n            default:\r\n                return state.tasks[id]\r\n        }\r\n    })\r\n\r\n    let tasksElements = tasks.map(t => {\r\n        return <Task key={t.id + id} id={t.id} status={t.status} title={t.title} todoListId={id} todoListEntityStatus={todoListEntityStatus === 'loading'}/>\r\n    })\r\n\r\n    //deleting todolist entity\r\n    const deleteTodoList = () => {\r\n        dispatch(deleteTodoListTC(id))\r\n    }\r\n    //changeTodoListTitle\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoListTitleTC(id, title))\r\n    }, [dispatch, id])\r\n\r\n    //todoList filter callbacks\r\n    const onChangeFilterAll = () => {\r\n        dispatch(changeTodoListFilterAC('all', id))\r\n    }\r\n    const onChangeFilterAActive = () => {\r\n        dispatch(changeTodoListFilterAC('active', id))\r\n    }\r\n    const onChangeFilterCompleted = () => {\r\n        dispatch(changeTodoListFilterAC('completed', id))\r\n    }\r\n\r\n    //add task\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskTC(title, id))\r\n    }\r\n\r\n    // variants for buttons based on filter value\r\n    const allVariant = filter === \"all\" ? \"contained\" : undefined\r\n    const activeVariant = filter === \"active\" ? \"contained\" : undefined\r\n    const completedVariant = filter === \"completed\" ? \"contained\" : undefined\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todoListTitle} changeTitle={changeTodoListTitle} disabled={todoListEntityStatus === 'loading'}/>\r\n                <IconButton onClick={deleteTodoList} disabled={todoListEntityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={todoListEntityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksElements}\r\n            </div>\r\n            <div>\r\n                <Button color=\"primary\" variant={allVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAll}>All</Button>\r\n                <Button color=\"primary\" variant={activeVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAActive}>Active</Button>\r\n                <Button color=\"primary\" variant={completedVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addTodoListTC, fetchTodoListsTC, TodoListEntityType} from \"../../state/todolist-reducer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {TodoList} from \"../todolistComponent/TodoList\";\r\n\r\n//this component was created just for routing purposes\r\nexport const TodoListsContainer = React.memo(function TodoListsContainerComponent() {\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, TodoListEntityType[]>(state => state.todoLists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        dispatch(addTodoListTC(todoListTitle))\r\n    }, [dispatch])\r\n\r\n    //fetching todos\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    //redirect if is not logged in\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    //todos view\r\n    const todoListJSXElements = todoLists.map(tl => {\r\n            return (\r\n                <Grid key={tl.id} item style={{wordBreak: 'break-word'}}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <TodoList\r\n                            id={tl.id}\r\n                            todoListTitle={tl.title}\r\n                            filter={tl.filter}\r\n                            todoListEntityStatus={tl.todoListEntityStatus}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px', justifyContent: 'center'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3} style={{justifyContent: 'center'}}>\r\n                {todoListJSXElements}\r\n            </Grid>\r\n        </>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./state/app-reducer\";\r\nimport {ErrorSnackbar} from \"./components/errorSnackbar/ErrorSnackbar\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {Login} from \"./components/login/Login\";\r\nimport {TodoListsContainer} from \"./components/todolists-container/TodoListsContainer\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {logoutTC} from \"./state/auth-reducer\";\r\n\r\n//this is for loading screen\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nconst App = React.memo(function AppWithReduxComponent() {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>( state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( state => state.auth.isLoggedIn)\r\n\r\n    const logout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <Backdrop open={status === 'loading'} className={classes.backdrop}><CircularProgress color={'primary'} size={70}/></Backdrop>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    {isLoggedIn\r\n                        ? <Button color=\"inherit\" onClick={logout}>Logout</Button>\r\n                        : <Button style={{color: \"white\"}} disabled={true}>Login</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/todo-list-solo-redo'} render={() => <TodoListsContainer/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1 style={{textAlign: \"center\"}}>404: Page not found</h1>}/>\r\n                    <Redirect exact from={'/'} to={'/todo-list-solo-redo'}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"EditableSpan_inputField__3qIHy\",\"error\":\"EditableSpan_error__26IDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"Task_isDone__1B-ow\",\"liElement\":\"Task_liElement__2oSik\"};"],"sourceRoot":""}