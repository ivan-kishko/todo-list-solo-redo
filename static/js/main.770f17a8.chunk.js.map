{"version":3,"sources":["serviceWorker.ts","api/api.ts","AddItemForm.tsx","state/todolist-reducer.ts","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","TodoListWithHooks.tsx","AppWithRedux.tsx","state/store.ts","index.tsx","EditableSpan.module.css","Task.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","inputValue","setInputValue","error","setError","addItem","trim","TextField","size","value","onChange","e","currentTarget","onBlur","onKeyPress","key","variant","label","helperText","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","initState","v1","changeTodoListFilterAC","filter","todoListId","type","EditableSpan","changeTitle","editMode","setEditMode","setTaskTitle","className","classes","inputField","autoFocus","placeholder","onDoubleClick","Task","status","dispatch","useDispatch","changeTaskTitle","useCallback","newTitle","getState","task","tasks","find","t","description","priority","startDate","deadline","then","res","changeTaskTitleAC","changeTaskTitleTC","liElement","isDoneClassName","Checkbox","checked","changeTaskStatusAC","changeTaskStatusTC","Completed","New","taskID","deleteTaskAC","deleteTaskTC","Delete","TodoListWithHooks","todoListTitle","useEffect","fetchTasksAC","data","items","tasksElements","useSelector","state","map","changeTodoListTitle","resultCode","changeTodoListTitleAC","allVariant","undefined","activeVariant","completedVariant","deleteTodoListTC","item","Button","style","marginTop","AppWithRedux","todoLists","addTodoList","todoList","console","warn","messages","todoListJSXElements","tl","Grid","wordBreak","Paper","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","stateCopy","forEach","log","todoEntity","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.770f17a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd54d3622-f03b-45b2-9f0a-fa6f5f4405c5'\r\n    }\r\n})\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodoListType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    //tasks requests\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function AddItemForm(props: AddItemFormType) {\r\n    //local input state\r\n    const [inputValue, setInputValue] = useState('')\r\n    //local error state\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onBlurErrorFalse = () => {\r\n        if(error !== null) setError(null)\r\n    }\r\n    //add task or todolist based on callback\r\n    const addItem = () => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addItem(inputValue.trim())\r\n            setInputValue('')\r\n        } else {\r\n            setError('Title required')\r\n        }\r\n    }\r\n\r\n    const onEnterPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    //input value flux changer\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                error={!!error}\r\n                value={inputValue}\r\n                onChange={onChangeTitle}\r\n                onBlur={onBlurErrorFalse}\r\n                onKeyPress={onEnterPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color='primary' onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {v1} from \"uuid\";\r\nimport {todolistsAPI, TodoListType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type TodoListEntityType = TodoListType & {\r\n    filter: FilterValueType\r\n}\r\nexport type FilterValueType = 'all' | 'completed' | 'active'\r\n\r\nexport type AddTodoListAT = ReturnType<typeof addTodoListAC>\r\nexport type DeleteTodoListAT = ReturnType<typeof deleteTodoListAC>\r\ntype ChangeTodoListFilterAT = ReturnType<typeof changeTodoListFilterAC>\r\ntype ChangeTodoListTitleAT = ReturnType<typeof changeTodoListTitleAC>\r\nexport type FetchTodoListsAT = ReturnType<typeof fetchTodoListsAC>\r\n\r\ntype TodoListATs = AddTodoListAT | DeleteTodoListAT | ChangeTodoListFilterAT | ChangeTodoListTitleAT | FetchTodoListsAT\r\n\r\nexport const todoListId1 = v1()\r\nexport const todoListId2 = v1()\r\nconst initState: TodoListEntityType[] = []\r\n\r\nexport const todolistReducer = (state: TodoListEntityType[] = initState, action: TodoListATs): TodoListEntityType[] => {\r\n    switch(action.type) {\r\n        case \"SET-TODO-LISTS\": {\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all'}))\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            let todoEntity: TodoListEntityType = {...action.todoList, filter: 'all'}\r\n            return [todoEntity, ...state]\r\n        }\r\n        case \"DELETE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.newTitle} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const fetchTodoListsAC = (todoLists: TodoListType[]) => {\r\n    return {type: \"SET-TODO-LISTS\", todoLists} as const\r\n}\r\nexport const addTodoListAC = (todoList: TodoListType) => {\r\n    return {type: \"ADD-TODOLIST\", todoList} as const\r\n}\r\nexport const deleteTodoListAC = (todoListId: string) => {\r\n    return {type: \"DELETE-TODOLIST\", todoListId} as const\r\n}\r\nexport const changeTodoListFilterAC = (filter: FilterValueType, todoListId: string) => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter, todoListId} as const\r\n}\r\nexport const changeTodoListTitleAC = (todoListId: string, newTitle: string) => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", todoListId, newTitle} as const\r\n}\r\n\r\n\r\nexport const fetchTodoListsTC = () => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(fetchTodoListsAC(res.data))\r\n        })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n            } else {\r\n                console.warn(res.data.messages[0])\r\n            }\r\n        })\r\n}\r\n\r\nexport const deleteTodoListTC = (id: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(id)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(deleteTodoListAC(id))\r\n            }\r\n        })\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, newTitle: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(todoListId, newTitle)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(changeTodoListTitleAC(todoListId, newTitle))\r\n            }\r\n        })\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from './EditableSpan.module.css'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function EditableSpanComponent({title, changeTitle}: EditableSpanType) {\r\n    //editMode for span local state\r\n    const [editMode, setEditMode] = useState(false)\r\n    //title local state\r\n    const [taskTitle, setTaskTitle] = useState(title)\r\n    //local error state for input\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onDoubleClickOnEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onBlurOffEditMode = () => {\r\n        if (taskTitle !== '') {\r\n            setEditMode(false)\r\n            changeTitle(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (taskTitle !== '') {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                changeTitle(taskTitle)\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    //conditional rendering of span or input field\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                className={`${classes.inputField} ${error ? classes.error : ''}`}\r\n                autoFocus\r\n                value={taskTitle}\r\n                onBlur={onBlurOffEditMode}\r\n                onKeyPress={onEnterPressOffEditMode}\r\n                onChange={onChangeTaskTitle}\r\n                placeholder={error ? 'please enter title' : ''}\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                error={error}/>\r\n            : <span onDoubleClick={onDoubleClickOnEditMode}>{taskTitle}</span>\r\n    )\r\n})","import {AddTodoListAT, DeleteTodoListAT, FetchTodoListsAT} from \"./todolist-reducer\";\r\nimport {TaskStatuses, TaskType, todolistsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\ntype FetchTasksAT = ReturnType<typeof fetchTasksAC>\r\ntype AddTaskAT = ReturnType<typeof addTaskAC>\r\ntype DeleteTaskAT = ReturnType<typeof deleteTaskAC>\r\ntype ChangeTaskStatusAT = ReturnType<typeof changeTaskStatusAC>\r\ntype ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\r\n\r\ntype TasksATs = FetchTasksAT | AddTaskAT | DeleteTaskAT | ChangeTaskStatusAT | ChangeTaskTitleAT | AddTodoListAT | DeleteTodoListAT |  FetchTodoListsAT\r\n\r\nconst initState = {\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initState, action: TasksATs): TasksStateType => {\r\n    switch(action.type) {\r\n        case \"SET-TODO-LISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            debugger\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoList.id] = []\r\n            return stateCopy\r\n        }\r\n        case \"DELETE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            console.log(stateCopy)\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            stateCopy[action.task.todoListId] = [action.task, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case \"DELETE-TASK\":\r\n            return {\r\n                ...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, title: action.newTitle} : t)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const fetchTasksAC = (tasks: TaskType[], todoListId: string) => {\r\n    return {type: \"SET-TASKS\", tasks, todoListId} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: \"ADD-TASK\", task} as const\r\n}\r\nexport const deleteTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: \"DELETE-TASK\", taskId, todoListId} as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, todoListId: string, status: TaskStatuses) => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskId, todoListId, status} as const\r\n}\r\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, newTitle: string) => {\r\n    return {type: \"CHANGE-TASK-TITLE\", todoListId, taskId, newTitle} as const\r\n}\r\n\r\nexport const fetchTasksTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todoListId)\r\n        .then(res => {\r\n            dispatch(fetchTasksAC(res.data.items, todoListId))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (taskTitle: string, todoListId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todoListId, taskTitle)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const deleteTaskTC = (taskID: string, todoListId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todoListId, taskID)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC(taskID, todoListId))\r\n        })\r\n}\r\n\r\nexport const changeTaskStatusTC = (taskId: string, todoListId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n    if(task) {\r\n        const model = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline\r\n        }\r\n        todolistsAPI.updateTask(todoListId, taskId, model)\r\n            .then(res => {\r\n                dispatch(changeTaskStatusAC(taskId, todoListId, status))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (taskId: string, todoListId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n    if(task) {\r\n        const model = {\r\n            title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline\r\n        }\r\n        todolistsAPI.updateTask(todoListId, taskId, model)\r\n            .then(res => {\r\n                dispatch(changeTaskTitleAC(todoListId, taskId, title))\r\n            })\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport classes from './Task.module.css'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeTaskStatusTC, changeTaskTitleTC, deleteTaskTC} from \"./state/tasks-reducer\";\r\nimport {TaskStatuses} from \"./api/api\";\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    title: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n}\r\n\r\nexport const Task = React.memo(function TaskComponent({id, title, status, todoListId}: TaskPropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusTC(id, todoListId, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New))\r\n    }\r\n    const onClickDeleteTask = () => {\r\n        dispatch(deleteTaskTC(id, todoListId))\r\n    }\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        dispatch(changeTaskTitleTC(id, todoListId, newTitle))\r\n    }, [dispatch, todoListId, id])\r\n\r\n    return (\r\n        <li key={id} className={`${classes.liElement} ${status === 2 ? classes.isDoneClassName : ''}`}>\r\n            <Checkbox checked={status === 2} onChange={onChangeTaskStatus} color={\"primary\"}/>\r\n            <EditableSpan title={title} changeTitle={changeTaskTitle}/>\r\n            <IconButton onClick={onClickDeleteTask}>\r\n                <Delete />\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport './TodoList.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {addTaskTC, fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    deleteTodoListTC,\r\n    FilterValueType,\r\n} from \"./state/todolist-reducer\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskType} from \"./api/api\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    todoListTitle: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport const TodoListWithHooks = React.memo(function TodoListWithHooksComponent(props: TodoListPropsType) {\r\n    const {id, todoListTitle, filter} = props;\r\n\r\n    const dispatch = useDispatch()\r\n    //fetching tasks\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(id))\r\n    }, [dispatch, id])\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => {\r\n        switch (filter) {\r\n            case \"active\":\r\n                return state.tasks[id].filter(t => t.status === 0)\r\n            case \"completed\":\r\n                return state.tasks[id].filter(t => t.status === 2)\r\n            default:\r\n                return state.tasks[id]\r\n        }\r\n    })\r\n\r\n    let tasksElements = tasks.map(t => {\r\n        return <Task key={t.id + id} id={t.id} status={t.status} title={t.title} todoListId={id}/>\r\n    })\r\n\r\n    //deleting todolist entity\r\n    const deleteTodoList = () => {\r\n        dispatch(deleteTodoListTC(id))\r\n    }\r\n    //changeTodoListTitle\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoListTitleTC(id, title))\r\n    }, [dispatch, id])\r\n\r\n    //todoList filter callbacks\r\n    const onChangeFilterAll = () => {\r\n        dispatch(changeTodoListFilterAC('all', id))\r\n    }\r\n    const onChangeFilterAActive = () => {\r\n        dispatch(changeTodoListFilterAC('active', id))\r\n    }\r\n    const onChangeFilterCompleted = () => {\r\n        dispatch(changeTodoListFilterAC('completed', id))\r\n    }\r\n\r\n    //add task\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskTC(title, id))\r\n    }\r\n\r\n    // variants for buttons based on filter value\r\n    const allVariant = filter === \"all\" ? \"contained\" : undefined\r\n    const activeVariant = filter === \"active\" ? \"contained\" : undefined\r\n    const completedVariant = filter === \"completed\" ? \"contained\" : undefined\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todoListTitle} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={deleteTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasksElements}\r\n            </div>\r\n            <div>\r\n                <Button color=\"primary\" variant={allVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAll}>All</Button>\r\n                <Button color=\"primary\" variant={activeVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAActive}>Active</Button>\r\n                <Button color=\"primary\" variant={completedVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodoListTC, fetchTodoListsTC, TodoListEntityType,} from \"./state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TodoListWithHooks} from \"./TodoListWithHooks\";\r\n\r\nconst AppWithRedux = React.memo(function AppWithReduxComponent() {\r\n    const dispatch = useDispatch()\r\n    //fetching todoLists\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch])\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoListEntityType[]>(state => {\r\n        return state.todoLists\r\n    })\r\n\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        dispatch(addTodoListTC(todoListTitle))\r\n    }, [dispatch])\r\n\r\n    const todoListJSXElements = todoLists.map(tl => {\r\n            return (\r\n                <Grid key={tl.id} item style={{wordBreak: 'break-word'}}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <TodoListWithHooks\r\n                            id={tl.id}\r\n                            todoListTitle={tl.title}\r\n                            filter={tl.filter}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px', justifyContent: 'center'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3} style={{justifyContent: 'center'}}>\r\n                    {todoListJSXElements}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\ndocument.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"EditableSpan_inputField__2zjDg\",\"error\":\"EditableSpan_error__7i9XP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"Task_isDone__UwDu_\",\"liElement\":\"Task_liElement__323IS\"};"],"sourceRoot":""}