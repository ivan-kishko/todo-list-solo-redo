{"version":3,"sources":["serviceWorker.ts","api/api.ts","components/addItemForm/AddItemForm.tsx","state/app-reducer.ts","utils/error-utils.ts","state/todolist-reducer.ts","components/editableSpan/EditableSpan.tsx","state/tasks-reducer.ts","components/taskComponent/Task.tsx","components/todolistComponent/TodoList.tsx","components/errorSnackbar/ErrorSnackbar.tsx","App.tsx","state/store.ts","index.tsx","components/editableSpan/EditableSpan.module.css","components/taskComponent/Task.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","inputValue","setInputValue","error","setError","addItem","trim","TextField","size","value","onChange","e","currentTarget","onBlur","onKeyPress","key","variant","label","helperText","disabled","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","initState","status","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerTodoEntityError","todoId","changeTodoListEntityStatusAC","handleServerAppNetworkError","message","handleServerTodoEntityNetworkError","changeTodoListFilterAC","filter","todoListId","changeTodoListTitleAC","newTitle","todoListEntityStatus","EditableSpan","changeTitle","editMode","setEditMode","setTaskTitle","className","classes","inputField","autoFocus","placeholder","onDoubleClick","fetchTasksAC","tasks","deleteTaskAC","changeTaskStatusAC","changeTaskTitleAC","Task","useDispatch","changeTaskTitle","useCallback","getState","a","task","find","t","description","priority","startDate","deadline","res","resultCode","changeTaskTitleTC","liElement","isDoneClassName","Checkbox","checked","changeTaskStatusTC","Completed","New","taskID","deleteTaskTC","Delete","TodoList","todoListTitle","useEffect","items","tasksElements","useSelector","state","map","changeTodoListTitle","allVariant","undefined","activeVariant","completedVariant","deleteTodoListTC","item","Button","style","marginTop","Alert","elevation","ErrorSnackbar","appSnackbarError","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","useStyles","makeStyles","theme","backdrop","zIndex","drawer","App","todoLists","addTodoList","todoList","todoListJSXElements","tl","Grid","wordBreak","Paper","padding","Backdrop","CircularProgress","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","stateCopy","forEach","console","log","todoEntity","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.fa1792dd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd54d3622-f03b-45b2-9f0a-fa6f5f4405c5'\r\n    }\r\n})\r\n\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodoListType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    //tasks requests\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function AddItemForm(props: AddItemFormType) {\r\n    //local input state\r\n    const [inputValue, setInputValue] = useState('')\r\n    //local error state\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onBlurErrorFalse = () => {\r\n        if(error !== null) setError(null)\r\n    }\r\n    //add task or todolist based on callback\r\n    const addItem = () => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addItem(inputValue.trim())\r\n            setInputValue('')\r\n        } else {\r\n            setError('Title required')\r\n        }\r\n    }\r\n\r\n    const onEnterPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    //input value flux changer\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                error={!!error}\r\n                value={inputValue}\r\n                onChange={onChangeTitle}\r\n                onBlur={onBlurErrorFalse}\r\n                onKeyPress={onEnterPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color='primary' onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {UnionActionType} from \"./action-types\";\r\n\r\n//local types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitStateType = typeof initState\r\n\r\n//init state\r\nconst initState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string\r\n}\r\n\r\n//reducer\r\nexport const appReducer = (state: InitStateType = initState, action: UnionActionType) => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n        case 'APP/SET-ERROR': {\r\n            return {...state, error: action.error}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET-STATUS', status} as const\r\n}\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {type: 'APP/SET-ERROR', error} as const\r\n}\r\n//thunks","import {setAppErrorAC, setAppStatusAC} from \"../state/app-reducer\";\r\nimport {changeTodoListEntityStatusAC} from \"../state/todolist-reducer\";\r\nimport {SetAppStatusAT, SetAppErrorAT} from \"../state/action-types\";\r\nimport {ChangeTodoListEntityStatusAT} from \"../state/action-types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/api\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('unexpected error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerTodoEntityError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType, todoId: string) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('unexpected error occurred'))\r\n    }\r\n    dispatch(changeTodoListEntityStatusAC(todoId, 'failed'))\r\n}\r\n\r\nexport const handleServerAppNetworkError = (message: string, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerTodoEntityNetworkError = (message: string, dispatch: ErrorUtilsDispatchType, todoId: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(changeTodoListEntityStatusAC(todoId, 'failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppStatusAT | SetAppErrorAT | ChangeTodoListEntityStatusAT>","import {todoListsAPI, TodoListType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {UnionActionType} from \"./action-types\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerAppNetworkError,\r\n    handleServerTodoEntityError,\r\n    handleServerTodoEntityNetworkError\r\n} from \"../utils/error-utils\";\r\n\r\n//local types\r\nexport type TodoListEntityType = TodoListType & {\r\n    filter: FilterValueType,\r\n    todoListEntityStatus: RequestStatusType\r\n}\r\nexport type FilterValueType = 'all' | 'completed' | 'active'\r\n\r\n//init state\r\nconst initState: TodoListEntityType[] = []\r\n\r\n//reducer\r\nexport const todolistReducer = (state: TodoListEntityType[] = initState, action: UnionActionType): TodoListEntityType[] => {\r\n    switch (action.type) {\r\n        case \"SET-TODO-LISTS\": {\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', todoListEntityStatus: 'idle'}))\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            let todoEntity: TodoListEntityType = {...action.todoList, filter: 'all', todoListEntityStatus: 'idle'}\r\n            return [todoEntity, ...state]\r\n        }\r\n        case \"DELETE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            debugger\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.newTitle} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n            return state.map(tl => tl.id === action.todoId ? {...tl, todoListEntityStatus: action.todoListEntityStatus} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const fetchTodoListsAC = (todoLists: TodoListType[]) => {\r\n    return {type: \"SET-TODO-LISTS\", todoLists} as const\r\n}\r\nexport const addTodoListAC = (todoList: TodoListType) => {\r\n    return {type: \"ADD-TODOLIST\", todoList} as const\r\n}\r\nexport const deleteTodoListAC = (todoListId: string) => {\r\n    return {type: \"DELETE-TODOLIST\", todoListId} as const\r\n}\r\nexport const changeTodoListFilterAC = (filter: FilterValueType, todoListId: string) => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter, todoListId} as const\r\n}\r\nexport const changeTodoListTitleAC = (todoListId: string, newTitle: string) => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", todoListId, newTitle} as const\r\n}\r\nexport const changeTodoListEntityStatusAC = (todoId: string, todoListEntityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', todoId, todoListEntityStatus} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = () => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.getTodoLists()\r\n        dispatch(fetchTodoListsAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTodoListAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n\r\n}\r\n\r\nexport const deleteTodoListTC = (id: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.deleteTodolist(id)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(deleteTodoListAC(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, newTitle: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, 'loading'))\r\n        const res = await todoListsAPI.updateTodolist(todoListId, newTitle)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(changeTodoListTitleAC(todoListId, newTitle))\r\n            dispatch(changeTodoListEntityStatusAC(todoListId, 'succeeded'))\r\n        } else {\r\n            handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n        }\r\n    } catch (err) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from './EditableSpan.module.css'\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function EditableSpanComponent({title, changeTitle, disabled}: EditableSpanType) {\r\n    //editMode for span local state\r\n    const [editMode, setEditMode] = useState(false)\r\n    //title local state\r\n    const [taskTitle, setTaskTitle] = useState(title)\r\n    //local error state for input\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onDoubleClickOnEditMode = () => {\r\n        if (!disabled) {\r\n            if (taskTitle !== title) {\r\n                setTaskTitle(title)\r\n            }\r\n            setEditMode(true)\r\n        }\r\n    }\r\n\r\n    const onBlurOffEditMode = () => {\r\n        if (taskTitle !== '') {\r\n            setEditMode(false)\r\n            changeTitle(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (taskTitle !== '') {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                changeTitle(taskTitle)\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    //conditional rendering of span or input field\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                className={`${classes.inputField} ${error ? classes.error : ''}`}\r\n                autoFocus\r\n                value={taskTitle}\r\n                onBlur={onBlurOffEditMode}\r\n                onKeyPress={onEnterPressOffEditMode}\r\n                onChange={onChangeTaskTitle}\r\n                placeholder={error ? 'please enter title' : ''}\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                error={error}/>\r\n            : <span onDoubleClick={onDoubleClickOnEditMode}>{title}</span>\r\n    )\r\n})","import {TaskStatuses, TaskType, todoListsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {UnionActionType} from \"./action-types\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {changeTodoListEntityStatusAC} from \"./todolist-reducer\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerAppNetworkError,\r\n    handleServerTodoEntityError,\r\n    handleServerTodoEntityNetworkError\r\n} from \"../utils/error-utils\";\r\n\r\n//local types\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\n//init state\r\nconst initState = {}\r\n\r\n//reducer\r\nexport const tasksReducer = (state: TasksStateType = initState, action: UnionActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TODO-LISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoList.id] = []\r\n            return stateCopy\r\n        }\r\n        case \"DELETE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            console.log(stateCopy)\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            stateCopy[action.task.todoListId] = [action.task, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case \"DELETE-TASK\":\r\n            return {\r\n                ...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.newTitle\r\n                } : t)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const fetchTasksAC = (tasks: TaskType[], todoListId: string) => {\r\n    return {type: \"SET-TASKS\", tasks, todoListId} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: \"ADD-TASK\", task} as const\r\n}\r\nexport const deleteTaskAC = (taskId: string, todoListId: string) => {\r\n    return {type: \"DELETE-TASK\", taskId, todoListId} as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, todoListId: string, status: TaskStatuses) => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskId, todoListId, status} as const\r\n}\r\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, newTitle: string) => {\r\n    return {type: \"CHANGE-TASK-TITLE\", todoListId, taskId, newTitle} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.getTasks(todoListId)\r\n        dispatch(fetchTasksAC(res.data.items, todoListId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (taskTitle: string, todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.createTask(todoListId, taskTitle)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (taskID: string, todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const res = await todoListsAPI.deleteTask(todoListId, taskID)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(deleteTaskAC(taskID, todoListId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusTC = (taskId: string, todoListId: string, status: TaskStatuses) => async (dispatch: Dispatch<UnionActionType>, getState: () => AppRootStateType) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, 'loading'))\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline\r\n            }\r\n            const res = await todoListsAPI.updateTask(todoListId, taskId, model)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTaskStatusAC(taskId, todoListId, status))\r\n                dispatch(changeTodoListEntityStatusAC(todoListId, 'succeeded'))\r\n            } else {\r\n                handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n            }\r\n        }\r\n    } catch (err) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (taskId: string, todoListId: string, title: string) => async (dispatch: Dispatch<UnionActionType>, getState: () => AppRootStateType) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC(todoListId, 'loading'))\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model = {\r\n                title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline\r\n            }\r\n            const res = await todoListsAPI.updateTask(todoListId, taskId, model)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTaskTitleAC(todoListId, taskId, title))\r\n                dispatch(changeTodoListEntityStatusAC(todoListId, 'succeeded'))\r\n            } else {\r\n                handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n            }\r\n        }\r\n    } catch (err) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport classes from './Task.module.css'\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeTaskStatusTC, changeTaskTitleTC, deleteTaskTC} from \"../../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/api\";\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    title: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n    todoListEntityStatus: boolean\r\n}\r\n\r\nexport const Task = React.memo(function TaskComponent({id, title, status, todoListId, todoListEntityStatus}: TaskPropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusTC(id, todoListId, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New))\r\n    }\r\n    const onClickDeleteTask = () => {\r\n        dispatch(deleteTaskTC(id, todoListId))\r\n    }\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        dispatch(changeTaskTitleTC(id, todoListId, newTitle))\r\n    }, [dispatch, todoListId, id])\r\n\r\n    return (\r\n        <li key={id} className={`${classes.liElement} ${status === 2 ? classes.isDoneClassName : ''}`}>\r\n            <Checkbox checked={status === 2} onChange={onChangeTaskStatus} color={\"primary\"} disabled={todoListEntityStatus}/>\r\n            <EditableSpan title={title} changeTitle={changeTaskTitle} disabled={todoListEntityStatus}/>\r\n            <IconButton onClick={onClickDeleteTask} disabled={todoListEntityStatus}>\r\n                <Delete />\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport './TodoList.css'\r\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {addTaskTC, fetchTasksTC} from \"../../state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    deleteTodoListTC,\r\n    FilterValueType,\r\n} from \"../../state/todolist-reducer\";\r\nimport {Task} from \"../taskComponent/Task\";\r\nimport {TaskType} from \"../../api/api\";\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    todoListTitle: string\r\n    filter: FilterValueType\r\n    todoListEntityStatus: RequestStatusType\r\n}\r\n\r\nexport const TodoList = React.memo(function TodoListWithHooksComponent(props: TodoListPropsType) {\r\n    const {id, todoListTitle, filter, todoListEntityStatus} = props;\r\n    const dispatch = useDispatch()\r\n\r\n    //fetching tasks\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(id))\r\n    }, [dispatch, id])\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => {\r\n        switch (filter) {\r\n            case \"active\":\r\n                return state.tasks[id].filter(t => t.status === 0)\r\n            case \"completed\":\r\n                return state.tasks[id].filter(t => t.status === 2)\r\n            default:\r\n                return state.tasks[id]\r\n        }\r\n    })\r\n\r\n    let tasksElements = tasks.map(t => {\r\n        return <Task key={t.id + id} id={t.id} status={t.status} title={t.title} todoListId={id} todoListEntityStatus={todoListEntityStatus === 'loading'}/>\r\n    })\r\n\r\n    //deleting todolist entity\r\n    const deleteTodoList = () => {\r\n        dispatch(deleteTodoListTC(id))\r\n    }\r\n    //changeTodoListTitle\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoListTitleTC(id, title))\r\n    }, [dispatch, id])\r\n\r\n    //todoList filter callbacks\r\n    const onChangeFilterAll = () => {\r\n        dispatch(changeTodoListFilterAC('all', id))\r\n    }\r\n    const onChangeFilterAActive = () => {\r\n        dispatch(changeTodoListFilterAC('active', id))\r\n    }\r\n    const onChangeFilterCompleted = () => {\r\n        dispatch(changeTodoListFilterAC('completed', id))\r\n    }\r\n\r\n    //add task\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskTC(title, id))\r\n    }\r\n\r\n    // variants for buttons based on filter value\r\n    const allVariant = filter === \"all\" ? \"contained\" : undefined\r\n    const activeVariant = filter === \"active\" ? \"contained\" : undefined\r\n    const completedVariant = filter === \"completed\" ? \"contained\" : undefined\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todoListTitle} changeTitle={changeTodoListTitle} disabled={todoListEntityStatus === 'loading'}/>\r\n                <IconButton onClick={deleteTodoList} disabled={todoListEntityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={todoListEntityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksElements}\r\n            </div>\r\n            <div>\r\n                <Button color=\"primary\" variant={allVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAll}>All</Button>\r\n                <Button color=\"primary\" variant={activeVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAActive}>Active</Button>\r\n                <Button color=\"primary\" variant={completedVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const appSnackbarError = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={appSnackbarError !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {appSnackbarError}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./components/addItemForm/AddItemForm\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodoListTC, fetchTodoListsTC, TodoListEntityType} from \"./state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TodoList} from \"./components/todolistComponent/TodoList\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\nimport {ErrorSnackbar} from \"./components/errorSnackbar/ErrorSnackbar\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nconst App = React.memo(function AppWithReduxComponent() {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, TodoListEntityType[]>(state => state.todoLists)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    //fetching todoLists\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        dispatch(addTodoListTC(todoListTitle))\r\n    }, [dispatch])\r\n\r\n    const todoListJSXElements = todoLists.map(tl => {\r\n            return (\r\n                <Grid key={tl.id} item style={{wordBreak: 'break-word'}}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <TodoList\r\n                            id={tl.id}\r\n                            todoListTitle={tl.title}\r\n                            filter={tl.filter}\r\n                            todoListEntityStatus={tl.todoListEntityStatus}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <Backdrop open={status === 'loading'} className={classes.backdrop}><CircularProgress color={'primary'} size={70}/></Backdrop>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {/*{status === 'loading' && <LinearProgress/>}*/}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px', justifyContent: 'center'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3} style={{justifyContent: 'center'}}>\r\n                    {todoListJSXElements}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistReducer,\r\n    app: appReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\ndocument.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"EditableSpan_inputField__3qIHy\",\"error\":\"EditableSpan_error__26IDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"Task_isDone__1B-ow\",\"liElement\":\"Task_liElement__2oSik\"};"],"sourceRoot":""}