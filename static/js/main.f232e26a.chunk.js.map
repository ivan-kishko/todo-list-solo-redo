{"version":3,"sources":["EditableSpan.module.css","Task.module.css","serviceWorker.ts","AddItemForm.tsx","state/todolist-reducer.ts","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","TodoListWithHooks.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","inputValue","setInputValue","error","setError","addItem","trim","TextField","size","value","onChange","e","currentTarget","onBlur","onKeyPress","key","variant","label","helperText","IconButton","color","onClick","AddBox","todoListId1","v1","todoListId2","initState","id","title","filter","changeTodoListFilterAC","type","todoListId","EditableSpan","changeTitle","editMode","setEditMode","taskTitle","setTaskTitle","className","classes","inputField","autoFocus","placeholder","onDoubleClick","isDone","Task","console","log","dispatch","useDispatch","changeTaskTitle","useCallback","newTitle","taskId","changeTaskTitleAC","liElement","isDoneClassName","Checkbox","checked","changeTaskStatusAC","deleteTaskAC","Delete","TodoListWithHooks","todoListTitle","tasksElements","useSelector","state","tasks","t","map","changeTodoListTitle","changeTodoListTitleAC","allVariant","undefined","activeVariant","completedVariant","deleteTodoListAC","Button","style","marginTop","AppWithRedux","todoLists","addTodoList","todoListJSXElements","tl","Grid","item","wordBreak","Paper","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","newTask","newTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f232e26a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"EditableSpan_inputField__2zjDg\",\"error\":\"EditableSpan_error__7i9XP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"Task_isDone__UwDu_\",\"liElement\":\"Task_liElement__323IS\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function AddItemForm(props: AddItemFormType) {\r\n    //local input state\r\n    const [inputValue, setInputValue] = useState('')\r\n    //local error state\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onBlurErrorFalse = () => {\r\n        if(error !== null) setError(null)\r\n    }\r\n    //add task or todolist based on callback\r\n    const addItem = () => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addItem(inputValue.trim())\r\n            setInputValue('')\r\n        } else {\r\n            setError('Title required')\r\n        }\r\n    }\r\n\r\n    const onEnterPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    //input value flux changer\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                error={!!error}\r\n                value={inputValue}\r\n                onChange={onChangeTitle}\r\n                onBlur={onBlurErrorFalse}\r\n                onKeyPress={onEnterPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color='primary' onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {v1} from \"uuid\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\nexport type FilterValueType = 'all' | 'completed' | 'active'\r\n\r\nexport type AddTodoListAT = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type DeleteTodoListAT = {\r\n    type: \"DELETE-TODOLIST\"\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListFilterAT = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    filter: FilterValueType\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListTitleAT = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    todoListId: string\r\n    title: string\r\n}\r\n\r\ntype TodoListATs = AddTodoListAT | DeleteTodoListAT | ChangeTodoListFilterAT | ChangeTodoListTitleAT\r\n\r\nexport const todoListId1 = v1()\r\nexport const todoListId2 = v1()\r\nconst initState: TodoListType[] = [\r\n    {\r\n        id: todoListId1,\r\n        title: 'What to learn',\r\n        filter: 'all'\r\n    },\r\n    {\r\n        id: todoListId2,\r\n        title: 'What to buy',\r\n        filter: 'all'\r\n    },\r\n]\r\n\r\nexport const todolistReducer = (state: TodoListType[] = initState, action: TodoListATs): TodoListType[] => {\r\n    switch(action.type) {\r\n        case \"ADD-TODOLIST\":\r\n            return [...state, {id: action.todoListId, title: action.title, filter: 'all'}]\r\n        case \"DELETE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.title} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTodoListAC = (title: string): AddTodoListAT => {\r\n    return {type: \"ADD-TODOLIST\", title: title, todoListId: v1()}\r\n}\r\nexport const deleteTodoListAC = (id: string): DeleteTodoListAT => {\r\n    return {type: \"DELETE-TODOLIST\", todoListId: id}\r\n}\r\nexport const changeTodoListFilterAC = (filter: FilterValueType, id: string): ChangeTodoListFilterAT => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, todoListId: id}\r\n}\r\nexport const changeTodoListTitleAC = (id: string, newTitle: string): ChangeTodoListTitleAT => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", todoListId: id, title: newTitle}\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from './EditableSpan.module.css'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function EditableSpanComponent({title, changeTitle}: EditableSpanType) {\r\n    //editMode for span local state\r\n    const [editMode, setEditMode] = useState(false)\r\n    //title local state\r\n    const [taskTitle, setTaskTitle] = useState(title)\r\n    //local error state for input\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onDoubleClickOnEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onBlurOffEditMode = () => {\r\n        if (taskTitle !== '') {\r\n            setEditMode(false)\r\n            changeTitle(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (taskTitle !== '') {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                changeTitle(taskTitle)\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    //conditional rendering of span or input field\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                className={`${classes.inputField} ${error ? classes.error : ''}`}\r\n                autoFocus\r\n                value={taskTitle}\r\n                onBlur={onBlurOffEditMode}\r\n                onKeyPress={onEnterPressOffEditMode}\r\n                onChange={onChangeTaskTitle}\r\n                placeholder={error ? 'please enter title' : ''}\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                error={error}/>\r\n            : <span onDoubleClick={onDoubleClickOnEditMode}>{taskTitle}</span>\r\n    )\r\n})","import {v1} from \"uuid\";\r\nimport {AddTodoListAT, DeleteTodoListAT, todoListId1, todoListId2} from \"./todolist-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\ntype AddTaskAT = {\r\n    type: \"ADD-TASK\"\r\n    taskTitle: string\r\n    todoListId: string\r\n}\r\ntype DeleteTaskAT = {\r\n    type: \"DELETE-TASK\"\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    taskId: string\r\n    isDone: boolean\r\n    todoListId: string\r\n}\r\ntype ChangeTaskTitleAT = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    todoListId: string\r\n    taskId: string\r\n    newTitle: string\r\n}\r\n\r\ntype TasksATs = AddTaskAT | DeleteTaskAT | ChangeTaskStatusAT | ChangeTaskTitleAT | AddTodoListAT | DeleteTodoListAT\r\n\r\nconst initState = {\r\n    [todoListId1]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS/TS', isDone: true},\r\n        {id: v1(), title: 'React', isDone: false},\r\n        {id: v1(), title: 'Redux', isDone: false},\r\n    ],\r\n    [todoListId2]: [\r\n        {id: v1(), title: 'Time', isDone: true},\r\n        {id: v1(), title: 'Brain', isDone: true},\r\n        {id: v1(), title: 'Car', isDone: false},\r\n        {id: v1(), title: 'Penthouse', isDone: false},\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initState, action: TasksATs): TasksStateType => {\r\n    switch(action.type) {\r\n        case \"DELETE-TASK\":\r\n            return {\r\n                ...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case \"ADD-TASK\":\r\n            const newTask: TaskType = {id: v1(), title: action.taskTitle, isDone: false}\r\n            return {\r\n                ...state, [action.todoListId]: [newTask, ...state[action.todoListId]]\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, title: action.newTitle} : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state, [action.todoListId]: []\r\n            }\r\n        case \"DELETE-TODOLIST\":\r\n            const newTasks = {...state}\r\n            delete newTasks[action.todoListId]\r\n            return newTasks\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (taskTitle: string, todoListId: string): AddTaskAT => {\r\n    return {type: \"ADD-TASK\", taskTitle, todoListId}\r\n}\r\nexport const deleteTaskAC = (taskId: string, todoListId: string): DeleteTaskAT => {\r\n    return {type: \"DELETE-TASK\", taskId, todoListId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): ChangeTaskStatusAT => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskId, isDone, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, newTitle: string): ChangeTaskTitleAT => {\r\n    return {type: \"CHANGE-TASK-TITLE\", todoListId, taskId, newTitle}\r\n}","import React, {ChangeEvent, useCallback} from 'react';\r\nimport classes from './Task.module.css'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {DispatchType} from \"./state/store\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, deleteTaskAC} from \"./state/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n    todoListId: string\r\n}\r\n\r\nexport const Task = React.memo(function TaskComponent({id, title, isDone, todoListId}: TaskPropsType) {\r\n    console.log('task')\r\n    const dispatch = useDispatch<DispatchType>()\r\n\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusAC(id, e.currentTarget.checked, todoListId))\r\n    }\r\n    const onClickDeleteTask = () => {\r\n        dispatch(deleteTaskAC(id, todoListId))\r\n    }\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        dispatch(changeTaskTitleAC(todoListId, id, newTitle))\r\n    }, [dispatch, todoListId, id])\r\n\r\n    return (\r\n        <li key={id} className={`${classes.liElement} ${isDone ? classes.isDoneClassName : ''}`}>\r\n            <Checkbox checked={isDone} onChange={onChangeTaskStatus} color={\"primary\"}/>\r\n            <EditableSpan title={title} changeTitle={changeTaskTitle}/>\r\n            <IconButton onClick={onClickDeleteTask}>\r\n                <Delete />\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport './TodoList.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, DispatchType} from \"./state/store\";\r\nimport {addTaskAC, TaskType} from \"./state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    deleteTodoListAC,\r\n    FilterValueType\r\n} from \"./state/todolist-reducer\";\r\nimport {Task} from \"./Task\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    todoListTitle: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport const TodoListWithHooks = React.memo(function TodoListWithHooksComponent(props: TodoListPropsType) {\r\n    const {\r\n        id,\r\n        todoListTitle,\r\n        filter\r\n    } = props;\r\n\r\n    console.log('TLwithHooks')\r\n    //dispatch hook\r\n    const dispatch = useDispatch<DispatchType>()\r\n    //selector for tasks\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => {\r\n        switch (filter) {\r\n            case \"active\":\r\n                return state.tasks[id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return state.tasks[id].filter(t => t.isDone)\r\n            default:\r\n                return state.tasks[id]\r\n        }\r\n    })\r\n\r\n    let tasksElements = tasks.map(t => {\r\n        return <Task key={t.id + id} id={t.id} isDone={t.isDone} title={t.title} todoListId={id}/>\r\n    })\r\n\r\n    //add task\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskAC(title, id))\r\n    }\r\n    //deleting todolist entity\r\n    const deleteTodoList = () => {\r\n        dispatch(deleteTodoListAC(id))\r\n    }\r\n    //changeTodoListTitle\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoListTitleAC(id, title))\r\n    }, [dispatch, id])\r\n\r\n    //filter callbacks\r\n    const onChangeFilterAll = () => {\r\n        dispatch(changeTodoListFilterAC('all', id))\r\n    }\r\n    const onChangeFilterAActive = () => {\r\n        dispatch(changeTodoListFilterAC('active', id))\r\n    }\r\n    const onChangeFilterCompleted = () => {\r\n        dispatch(changeTodoListFilterAC('completed', id))\r\n    }\r\n\r\n    // variants for buttons based on filter value\r\n    const allVariant = filter === \"all\" ? \"contained\" : undefined\r\n    const activeVariant = filter === \"active\" ? \"contained\" : undefined\r\n    const completedVariant = filter === \"completed\" ? \"contained\" : undefined\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todoListTitle} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={deleteTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasksElements}\r\n            </div>\r\n            <div>\r\n                <Button color=\"primary\" variant={allVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAll}>All</Button>\r\n                <Button color=\"primary\" variant={activeVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAActive}>Active</Button>\r\n                <Button color=\"primary\" variant={completedVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodoListAC, TodoListType,} from \"./state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, DispatchType} from \"./state/store\";\r\nimport {TodoListWithHooks} from \"./TodoListWithHooks\";\r\n\r\nconst AppWithRedux = React.memo(function AppWithReduxComponent() {\r\n    console.log('AppRedux')\r\n    const dispatch = useDispatch<DispatchType>()\r\n    const todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists)\r\n\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        dispatch(addTodoListAC(todoListTitle))\r\n    }, [dispatch])\r\n\r\n    const todoListJSXElements = todoLists.map(tl => {\r\n            return (\r\n                <Grid key={tl.id} item style={{wordBreak: 'break-word'}}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <TodoListWithHooks\r\n                            id={tl.id}\r\n                            todoListTitle={tl.title}\r\n                            filter={tl.filter}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px', justifyContent: 'center'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3} style={{justifyContent: 'center'}}>\r\n                    {todoListJSXElements}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport type DispatchType = typeof store.dispatch;\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\ndocument.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}