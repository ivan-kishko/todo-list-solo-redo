{"version":3,"sources":["EditableSpan.module.css","serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemForm","props","useState","inputValue","setInputValue","error","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onBlur","onKeyPress","key","variant","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","title","taskTitle","setTaskTitle","className","classes","inputField","autoFocus","changeTitle","placeholder","size","onDoubleClick","TodoList","tasksElements","tasks","map","t","isDoneClassName","isDone","id","Checkbox","checked","changeTaskStatus","newTitle","changeTaskTitle","deleteTask","Delete","todoListTitle","changeTodoListTitle","deleteTodoList","addTask","Button","filter","undefined","style","marginTop","changeFilter","todoListId1","v1","todoListId2","initState","AppWithRedux","dispatch","useDispatch","todoLists","useSelector","state","todoListId","type","filterValue","changeTodoListTitleAC","taskId","deleteTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","todoListJSXElements","tl","allTodoListTasks","filteredTasks","Grid","item","wordBreak","Paper","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","newTask","newTasks","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.70d96b5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"EditableSpan_inputField__2zjDg\",\"error\":\"EditableSpan_error__7i9XP\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n    //local input state\r\n    const [inputValue, setInputValue] = useState('')\r\n    //local error state\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onBlurErrorFalse = () => {\r\n        setError(null)\r\n    }\r\n    //add task or todolist based on callback\r\n    const addItem = () => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addItem(inputValue.trim())\r\n            setInputValue('')\r\n        } else {\r\n            setError('Title required')\r\n        }\r\n    }\r\n\r\n    const onEnterPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    //input value flux changer\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={!!error}\r\n                value={inputValue}\r\n                onChange={onChangeTitle}\r\n                onBlur={onBlurErrorFalse}\r\n                onKeyPress={onEnterPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton color='primary' onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from './EditableSpan.module.css'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n    //editMode for span local state\r\n    const [editMode, setEditMode] = useState(false)\r\n    //title local state\r\n    const [taskTitle, setTaskTitle] = useState(props.title)\r\n    //local error state for input\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onDoubleClickOnEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onBlurOffEditMode = () => {\r\n        if (taskTitle !== '') {\r\n            setEditMode(false)\r\n            props.changeTitle(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (taskTitle !== '') {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                props.changeTitle(taskTitle)\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    //conditional rendering of span or input field\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                className={`${classes.inputField} ${error ? classes.error : ''}`}\r\n                autoFocus\r\n                value={taskTitle}\r\n                onBlur={onBlurOffEditMode}\r\n                onKeyPress={onEnterPressOffEditMode}\r\n                onChange={onChangeTaskTitle}\r\n                placeholder={error ? 'please enter title' : ''}\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                error={error}/>\r\n            : <span onDoubleClick={onDoubleClickOnEditMode}>{taskTitle}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType, TaskType} from \"./AppWithRedux\";\r\nimport './TodoList.css'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    todoListTitle: string\r\n    filter: FilterValueType\r\n    tasks: TaskType[]\r\n    deleteTodoList: (todoListId: string) => void\r\n    deleteTask: (id: string, todoListId: string) => void\r\n    changeFilter: (filter: FilterValueType, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (todoListId: string, taskId: string, newTitle: string) => void\r\n    addTask: (taskTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList(props: TodoListPropsType) {\r\n    //render tasks\r\n    let tasksElements = props.tasks.map(t => {\r\n        const isDoneClassName = t.isDone ? \"isDone\" : \"\"\r\n        const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        }\r\n        const onClickDeleteTask = () => {\r\n            props.deleteTask(t.id, props.id)\r\n        }\r\n        const changeTaskTitle = (newTitle: string) => {\r\n            props.changeTaskTitle(props.id, t.id, newTitle)\r\n        }\r\n\r\n        return (\r\n            <div key={t.id} className={isDoneClassName}>\r\n                <Checkbox checked={t.isDone} onChange={onChangeTaskStatus} color={\"primary\"}/>\r\n                {/*<input type=\"checkbox\" checked={t.isDone} onChange={onChangeTaskStatus}/>*/}\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <IconButton onClick={onClickDeleteTask}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </div>)\r\n    })\r\n\r\n    //add task\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    //deleting todolist entity\r\n    const deleteTodoList = () => {\r\n        props.deleteTodoList(props.id)\r\n    }\r\n\r\n    //changeTodoListTitle\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n\r\n\r\n    //filter callbacks\r\n    const onChangeFilterAll = () => {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n\r\n    const onChangeFilterAActive = () => {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n\r\n    const onChangeFilterCompleted = () => {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n\r\n    // classnames for buttons based on filter value\r\n    // const allClassName = props.filter === \"all\" ? \"filterButtonActive\" : \"filterButton\"\r\n    // const activeClassName = props.filter === \"active\" ? \"filterButtonActive\" : \"filterButton\"\r\n    // const completedClassName = props.filter === \"completed\" ? \"filterButtonActive\" : \"filterButton\"\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.todoListTitle} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={deleteTodoList}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasksElements}\r\n            </div>\r\n            <div>\r\n                <Button color=\"primary\" variant={props.filter === \"all\" ? \"contained\" : undefined} style={{marginTop: '3px'}} onClick={onChangeFilterAll}>All</Button>\r\n                <Button color=\"primary\" variant={props.filter === \"active\" ? \"contained\" : undefined} style={{marginTop: '3px'}} onClick={onChangeFilterAActive}>Active</Button>\r\n                <Button color=\"primary\" variant={props.filter === \"completed\" ? \"contained\" : undefined} style={{marginTop: '3px'}} onClick={onChangeFilterCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {FilterValueType, TodoListType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type AddTodoListAT = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todoListId: string\r\n}\r\nexport type DeleteTodoListAT = {\r\n    type: \"DELETE-TODOLIST\"\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListFilterAT = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    filter: FilterValueType\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListTitleAT = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    todoListId: string\r\n    title: string\r\n}\r\n\r\ntype TodoListATs = AddTodoListAT | DeleteTodoListAT | ChangeTodoListFilterAT | ChangeTodoListTitleAT\r\n\r\nexport const todoListId1 = v1()\r\nexport const todoListId2 = v1()\r\nconst initState: TodoListType[] = [\r\n    {\r\n        id: todoListId1,\r\n        title: 'What to learn',\r\n        filter: 'all'\r\n    },\r\n    {\r\n        id: todoListId2,\r\n        title: 'What to buy',\r\n        filter: 'all'\r\n    },\r\n]\r\n\r\nexport const todolistReducer = (state: TodoListType[] = initState, action: TodoListATs): TodoListType[] => {\r\n    switch(action.type) {\r\n        case \"ADD-TODOLIST\":\r\n            return [...state, {id: action.todoListId, title: action.title, filter: 'all'}]\r\n        case \"DELETE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.title} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTodoListAC = (title: string): AddTodoListAT => {\r\n    return {type: \"ADD-TODOLIST\", title: title, todoListId: v1()}\r\n}\r\nexport const deleteTodoListAC = (id: string): DeleteTodoListAT => {\r\n    return {type: \"DELETE-TODOLIST\", todoListId: id}\r\n}\r\nexport const changeTodoListFilterAC = (filter: FilterValueType, id: string): ChangeTodoListFilterAT => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, todoListId: id}\r\n}\r\nexport const changeTodoListTitleAC = (id: string, newTitle: string): ChangeTodoListTitleAT => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", todoListId: id, title: newTitle}\r\n}","import {TasksStateType, TaskType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListAT, DeleteTodoListAT, todoListId1, todoListId2} from \"./todolist-reducer\";\r\n\r\ntype AddTaskAT = {\r\n    type: \"ADD-TASK\"\r\n    taskTitle: string\r\n    todoListId: string\r\n}\r\ntype DeleteTaskAT = {\r\n    type: \"DELETE-TASK\"\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    taskId: string\r\n    isDone: boolean\r\n    todoListId: string\r\n}\r\ntype ChangeTaskTitleAT = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    todoListId: string\r\n    taskId: string\r\n    newTitle: string\r\n}\r\n\r\ntype TasksATs = AddTaskAT | DeleteTaskAT | ChangeTaskStatusAT | ChangeTaskTitleAT | AddTodoListAT | DeleteTodoListAT\r\n\r\nconst initState = {\r\n    [todoListId1]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS/TS', isDone: true},\r\n        {id: v1(), title: 'React', isDone: false},\r\n        {id: v1(), title: 'Redux', isDone: false},\r\n    ],\r\n    [todoListId2]: [\r\n        {id: v1(), title: 'Time', isDone: true},\r\n        {id: v1(), title: 'Brain', isDone: true},\r\n        {id: v1(), title: 'Car', isDone: false},\r\n        {id: v1(), title: 'Penthouse', isDone: false},\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initState, action: TasksATs): TasksStateType => {\r\n    switch(action.type) {\r\n        case \"DELETE-TASK\":\r\n            return {\r\n                ...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case \"ADD-TASK\":\r\n            const newTask: TaskType = {id: v1(), title: action.taskTitle, isDone: false}\r\n            return {\r\n                ...state, [action.todoListId]: [newTask, ...state[action.todoListId]]\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, title: action.newTitle} : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state, [action.todoListId]: []\r\n            }\r\n        case \"DELETE-TODOLIST\":\r\n            const newTasks = {...state}\r\n            delete newTasks[action.todoListId]\r\n            return newTasks\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (taskTitle: string, todoListId: string): AddTaskAT => {\r\n    return {type: \"ADD-TASK\", taskTitle, todoListId}\r\n}\r\nexport const deleteTaskAC = (taskId: string, todoListId: string): DeleteTaskAT => {\r\n    return {type: \"DELETE-TASK\", taskId, todoListId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): ChangeTaskStatusAT => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskId, isDone, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, newTitle: string): ChangeTaskTitleAT => {\r\n    return {type: \"CHANGE-TASK-TITLE\", todoListId, taskId, newTitle}\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    deleteTodoListAC,\r\n} from \"./state/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, deleteTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, DispatchType} from \"./state/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport type FilterValueType = 'all' | 'completed' | 'active'\r\n\r\nfunction AppWithRedux() {\r\n    const dispatch = useDispatch<DispatchType>()\r\n    const todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    //todolists actions\r\n    //adding TodoList\r\n    const addTodoList = (todoListTitle: string) => {\r\n        dispatch(addTodoListAC(todoListTitle))\r\n    }\r\n    //removing TodoList\r\n    const deleteTodoList = (todoListId: string) => {\r\n        dispatch(deleteTodoListAC(todoListId))\r\n    }\r\n    //change filter\r\n    const changeFilter = (filterValue: FilterValueType, todoListId: string) => {\r\n        dispatch(changeTodoListFilterAC(filterValue, todoListId))\r\n    }\r\n    //change todolist title\r\n    const changeTodoListTitle = (todoListId: string, newTitle: string) => {\r\n        dispatch(changeTodoListTitleAC(todoListId, newTitle))\r\n    }\r\n\r\n    //tasks actions\r\n    //deleting task\r\n    const deleteTask = (taskId: string, todoListId: string) => {\r\n        dispatch(deleteTaskAC(taskId, todoListId))\r\n    }\r\n    //adding a task\r\n    const addTask = (taskTitle: string, todoListId: string) => {\r\n        dispatch(addTaskAC(taskTitle, todoListId))\r\n    }\r\n    //change task status\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId))\r\n    }\r\n    //task title change\r\n    const changeTaskTitle = (todoListId: string, taskId: string, newTitle: string) => {\r\n        dispatch(changeTaskTitleAC(todoListId, taskId, newTitle))\r\n    }\r\n\r\n    const todoListJSXElements = todoLists.map(tl => {\r\n            let allTodoListTasks: TaskType[] = tasks[tl.id]\r\n            let filteredTasks = allTodoListTasks;\r\n            if (tl.filter === 'active') {\r\n                filteredTasks = allTodoListTasks.filter(t => !t.isDone)\r\n            }\r\n            if (tl.filter === 'completed') {\r\n                filteredTasks = allTodoListTasks.filter(t => t.isDone)\r\n            }\r\n            return (\r\n                <Grid key={tl.id} item style={{wordBreak: 'break-word'}}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <TodoList\r\n                            // key={tl.id}\r\n                            id={tl.id}\r\n                            todoListTitle={tl.title}\r\n                            filter={tl.filter}\r\n                            tasks={filteredTasks}\r\n                            deleteTodoList={deleteTodoList}\r\n                            deleteTask={deleteTask}\r\n                            changeFilter={changeFilter}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            addTask={addTask}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px', justifyContent: 'center'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3} style={{justifyContent: 'center'}}>\r\n                    {todoListJSXElements}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport type DispatchType = typeof store.dispatch;\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\ndocument.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}