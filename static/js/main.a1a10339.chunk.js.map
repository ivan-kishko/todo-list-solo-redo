{"version":3,"sources":["serviceWorker.ts","api/api.ts","state/todolist-reducer.ts","utils/error-utils.ts","state/auth-reducer.ts","state/app-reducer.ts","components/errorSnackbar/ErrorSnackbar.tsx","components/login/Login.tsx","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","state/tasks-reducer.ts","components/taskComponent/Task.tsx","components/todolistComponent/TodoList.tsx","components/todolists-container/TodoListsContainer.tsx","App.tsx","state/store.ts","index.tsx","components/editableSpan/EditableSpan.module.css","components/taskComponent/Task.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","data","todoListsSlice","createSlice","name","initialState","reducers","fetchTodoListsAC","state","action","payload","todoLists","map","tl","filter","todoListEntityStatus","addTodoListAC","unshift","todoList","deleteTodoListAC","todoListId","changeTodoListFilterAC","changeTodoListTitleAC","newTitle","changeTodoListEntityStatusAC","todoId","clearDataOnLogoutAC","todoListReducer","reducer","actions","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerAppNetworkError","message","handleServerTodoEntityError","handleServerTodoEntityNetworkError","authSlice","isLoggedIn","setIsLoggedInAC","authReducer","appSlice","isInitialized","setAppInitAC","appReducer","Alert","props","elevation","variant","ErrorSnackbar","appSnackbarError","useSelector","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","React","memo","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","a","res","resultCode","resetForm","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","type","FormControlLabel","control","Checkbox","checked","Button","AddItemForm","useState","inputValue","setInputValue","setError","addItem","trim","size","value","onChange","e","currentTarget","onBlur","onKeyPress","key","helperText","disabled","IconButton","onClick","AddBox","EditableSpan","changeTitle","editMode","setEditMode","setTaskTitle","className","classes","inputField","autoFocus","placeholder","onDoubleClick","tasksSlice","fetchTasksAC","tasks","addTaskAC","task","deleteTaskAC","index","findIndex","t","splice","changeTaskStatusAC","changeTaskTitleAC","extraReducers","builder","addCase","forEach","tasksReducer","Task","changeTaskTitle","useCallback","getState","find","description","priority","startDate","deadline","changeTaskTitleTC","liElement","isDoneClassName","changeTaskStatusTC","Completed","New","taskID","deleteTaskTC","Delete","TodoList","todoListTitle","useEffect","items","tasksElements","changeTodoListTitle","allVariant","undefined","activeVariant","completedVariant","deleteTodoListTC","marginTop","TodoListsContainer","addTodoList","todoListJSXElements","wordBreak","Paper","padding","justifyContent","spacing","useStyles","makeStyles","theme","backdrop","zIndex","drawer","App","logout","Backdrop","CircularProgress","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","exact","path","render","textAlign","from","top","width","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"iRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICJMC,EAMAC,E,oJANAD,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,eAAAA,I,uBAAAA,I,kBAAAA,M,KA4CZ,IAAMC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KAL5EF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAXzDF,EAAe,SAcfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAfFP,EAAe,SAiBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAlBlER,EAAe,SAoBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA4DI,EAA5D,UAAgF,CAACL,MAAOO,KArB1FT,EAAe,SAuBbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,IAxBnFV,EAAe,SA2BlBW,GACF,OAAOjB,EAASS,KAAT,aAA4DQ,IA5B9DX,EAAe,WA+BpB,OAAON,EAASO,IAAT,YA/BFD,EAAe,WAkCpB,OAAON,EAASW,OAAT,e,QCpFTO,EAAiBC,YAAY,CAC/BC,KAAM,YACNC,aAJoC,GAKpCC,SAAU,CACNC,iBADM,SACWC,EAAOC,GACpB,OAAOA,EAAOC,QAAQC,UAAUC,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaC,OAAQ,MAAOC,qBAAsB,aAE5FC,cAJM,SAIQR,EAAOC,GACjBD,EAAMS,QAAN,2BAAkBR,EAAOC,QAAQQ,UAAjC,IAA2CJ,OAAQ,MAAOC,qBAAsB,WAEpFI,iBAPM,SAOWX,EAAOC,GACpB,OAAOD,EAAMM,QAAO,SAAAD,GAAE,OAAIA,EAAGnB,KAAOe,EAAOC,QAAQU,eAEvDC,uBAVM,SAUiBb,EAAOC,GAC1B,OAAOD,EAAMI,KAAI,SAAAC,GAAE,OAAIA,EAAGnB,KAAOe,EAAOC,QAAQU,WAAzB,2BAA0CP,GAA1C,IAA8CC,OAAQL,EAAOC,QAAQI,SAAUD,MAE1GS,sBAbM,SAagBd,EAAOC,GACzB,OAAOD,EAAMI,KAAI,SAAAC,GAAE,OAAIA,EAAGnB,KAAOe,EAAOC,QAAQU,WAAzB,2BAA0CP,GAA1C,IAA8CrB,MAAOiB,EAAOC,QAAQa,WAAYV,MAE3GW,6BAhBM,SAgBuBhB,EAAOC,GAChC,OAAOD,EAAMI,KAAI,SAAAC,GAAE,OAAIA,EAAGnB,KAAOe,EAAOC,QAAQe,OAAzB,2BAAsCZ,GAAtC,IAA0CE,qBAAsBN,EAAOC,QAAQK,uBAAwBF,MAElIa,oBAnBM,WAoBF,MAAO,OAMNC,EAAkBzB,EAAe0B,QAEvC,EAOoB1B,EAAe2B,QANtCtB,EADG,EACHA,iBACAS,EAFG,EAEHA,cACAG,EAHG,EAGHA,iBACAE,EAJG,EAIHA,uBACAC,EALG,EAKHA,sBACAE,EANG,EAMHA,6BACAE,EAPG,EAOHA,oBCpDSI,EAAuB,SAAI7B,EAAuB8B,GACvD9B,EAAK+B,SAASC,OACdF,EAASG,GAAc,CAACC,MAAOlC,EAAK+B,SAAS,MAE7CD,EAASG,GAAc,CAACC,MAAO,+BAEnCJ,EAASK,GAAe,CAACC,OAAQ,aAGxBC,EAA8B,SAACC,EAAiBR,GACzDA,EAASG,GAAc,CAACC,MAAOI,KAC/BR,EAASK,GAAe,CAACC,OAAQ,aAIxBG,EAA8B,SAAIvC,EAAuB8B,EAAkCN,GAChGxB,EAAK+B,SAASC,OACdF,EAASG,GAAc,CAACC,MAAOlC,EAAK+B,SAAS,MAE7CD,EAASG,GAAc,CAACC,MAAO,+BAEnCJ,EAASP,EAA6B,CAACC,SAAQV,qBAAsB,aAG5D0B,EAAqC,SAACF,EAAiBR,EAAkCN,GAClGM,EAASG,GAAc,CAACC,MAAOI,KAC/BR,EAASP,EAA6B,CAACC,SAAQV,qBAAsB,aClBnE2B,EAAYvC,YAAY,CAC1BC,KAAM,OACNC,aANc,CACdsC,YAAY,GAMZrC,SAAU,CAGNsC,gBAHM,SAGUpC,EAAOC,GACnBD,EAAMmC,WAAalC,EAAOC,QAAQiC,eAMjCE,EAAcH,EAAUd,QACxBgB,GAAkBF,EAAUb,QAAQe,gBCZ3CE,GAAW3C,YAAY,CACzBC,KAAM,MACNC,aATc,CACdgC,OAAQ,OACRF,MAAO,KACPY,eAAe,GAOfzC,SAAU,CACN8B,eADM,SACS5B,EAAOC,GAClBD,EAAM6B,OAAS5B,EAAOC,QAAQ2B,QAElCH,cAJM,SAIQ1B,EAAOC,GACjBD,EAAM2B,MAAQ1B,EAAOC,QAAQyB,OAEjCa,aAPM,SAOOxC,EAAOC,GAChBD,EAAMuC,cAAgBtC,EAAOC,QAAQqC,kBAMpCE,GAAaH,GAASlB,QAG5B,GAAsDkB,GAASjB,QAAxDO,GAAP,GAAOA,eAAgBF,GAAvB,GAAuBA,cAAec,GAAtC,GAAsCA,a,oBC/B7C,SAASE,GAAMC,GACX,OAAO,kBAAC,KAAD,eAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGjD,SAASG,KACZ,IAAMC,EAAmBC,aAA6C,SAAAhD,GAAK,OAAIA,EAAMiD,IAAItB,SACnFJ,EAAW2B,cAEXC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJ9B,EAASG,GAAc,CAACC,MAAO,SAGnC,OACI,kBAAC2B,GAAA,EAAD,CAAUC,KAA2B,OAArBR,EAA2BS,iBAAkB,IAAMC,QAASN,GACxE,kBAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,SACjCX,I,sGCJJY,GAAQC,IAAMC,MAAK,WAE5B,IAAMtC,EAAW2B,cACXf,EAAaa,aAAuC,SAAAhD,GAAK,OAAIA,EAAM8D,KAAK3B,cAExE4B,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA+B,GAYrC,OAXKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,oBAKdI,EAAOH,SAEFG,EAAOH,SAAS1C,OAAS,IAC/B8C,EAAOJ,SAAW,4CAFlBI,EAAOJ,SAAW,oBAIfI,GAEXE,SAAU,SAACH,GHAI,IAAC7E,EGCZ8B,GHDY9B,EGCK6E,EHDN,uCAA2B,WAAO/C,GAAP,eAAAmD,EAAA,sEAE1CnD,EAASK,GAAe,CAACC,OAAQ,aAFS,SAGxB/C,EAAmBW,GAHK,OAId,KADtBkF,EAHoC,QAIlClF,KAAKmF,YACTrD,EAASa,GAAgB,CAACD,YAAY,KACtCZ,EAASK,GAAe,CAACC,OAAQ,gBAEjCP,EAAqBqD,EAAIlF,KAAM8B,GARO,gDAW1CO,EAA4B,KAAIC,QAASR,GAXC,yDAA3B,wDGEXwC,EAAOc,eAKf,OAAI1C,EACO,kBAAC,KAAD,CAAU2C,GAAI,yBAIrB,kBAACC,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,UACrB,kBAACF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,0BAAMV,SAAUV,EAAOqB,cACnB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,uDACI,uBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAK,uBAD1B,UAIJ,sEACA,wDACA,8CAEJ,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,eACIC,MAAM,QACNC,OAAO,UACH9B,EAAO+B,cAAc,WAE5B/B,EAAOQ,OAAOL,OAASH,EAAOgC,QAAQ7B,OAAS,yBAAK8B,MAAO,CAACC,MAAO,QAASlC,EAAOQ,OAAOL,OAC3F,kBAACyB,GAAA,EAAD,eACIO,KAAK,WACLN,MAAM,WACNC,OAAO,UACH9B,EAAO+B,cAAc,cAE5B/B,EAAOQ,OAAOJ,UAAYJ,EAAOgC,QAAQ5B,UAAY,yBAAK6B,MAAO,CAACC,MAAO,QAASlC,EAAOQ,OAAOJ,UACjG,kBAACgC,GAAA,EAAD,eACIP,MAAO,cACPQ,QAAS,kBAACC,GAAA,EAAD,OACLtC,EAAO+B,cAAc,cAH7B,CAIIQ,QAASvC,EAAOO,OAAOF,cAE3B,kBAACmC,EAAA,EAAD,CAAQL,KAAM,SAAUrD,QAAS,YAAaoD,MAAO,WAArD,iB,mBCnFfO,GAAc5C,IAAMC,MAAK,SAAqBlB,GAEvD,MAAoC8D,mBAAS,IAA7C,oBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAA0BF,mBAAwB,MAAlD,oBAAO9E,EAAP,KAAciF,EAAd,KAMMC,EAAU,WACc,KAAtBH,EAAWI,QACXnE,EAAMkE,QAAQH,EAAWI,QACzBH,EAAc,KAEdC,EAAS,mBAgBjB,OACI,6BACI,kBAACjB,GAAA,EAAD,CACIoB,KAAM,QACNpF,QAASA,EACTqF,MAAON,EACPO,SAXU,SAACC,GACnBP,EAAcO,EAAEC,cAAcH,OAC9BJ,EAAS,OAUDQ,OAhCa,WACR,OAAVzF,GAAgBiF,EAAS,OAgCpBS,WApBgB,SAACH,GACX,UAAVA,EAAEI,KACFT,KAmBIhE,QAAS,WACT+C,MAAO,QACP2B,WAAY5F,EACZ6F,SAAU7E,EAAM6E,WAEpB,kBAACC,EAAA,EAAD,CAAYxB,MAAM,UAAUyB,QAASb,EAASW,SAAU7E,EAAM6E,UAC1D,kBAACG,GAAA,EAAD,W,uCC9CHC,GAAehE,IAAMC,MAAK,YAAkF,IAAlD7E,EAAiD,EAAjDA,MAAO6I,EAA0C,EAA1CA,YAAaL,EAA6B,EAA7BA,SAEvF,EAAgCf,oBAAS,GAAzC,oBAAOqB,EAAP,KAAiBC,EAAjB,KAEA,EAAkCtB,mBAASzH,GAA3C,oBAAOO,EAAP,KAAkByI,EAAlB,KAEA,EAA0BvB,oBAAS,GAAnC,oBAAO9E,EAAP,KAAciF,EAAd,KAqCA,OACIkB,EACM,kBAACnC,GAAA,EAAD,CACEsC,UAAS,UAAKC,KAAQC,WAAb,YAA2BxG,EAAQuG,KAAQvG,MAAQ,IAC5DyG,WAAS,EACTpB,MAAOzH,EACP6H,OA3Bc,WACJ,KAAd7H,GACAwI,GAAY,GACZF,EAAYtI,IAEZqH,GAAS,IAuBLS,WAnBoB,SAACH,GACX,KAAd3H,EACc,UAAV2H,EAAEI,MACFS,GAAY,GACZF,EAAYtI,IAGhBqH,GAAS,IAaLK,SA3Cc,SAACC,GACvBc,EAAad,EAAEC,cAAcH,OAC7BJ,GAAS,IA0CDyB,YAAa1G,EAAQ,qBAAuB,GAC5CkB,QAAS,WACTkE,KAAM,QACNpF,MAAOA,IACT,0BAAM2G,cA3CgB,WACvBd,IACGjI,IAAcP,GACdgJ,EAAahJ,GAEjB+I,GAAY,MAsCqC/I,M,UCvCvDuJ,GAAa5I,YAAY,CAC3BC,KAAM,QACNC,aAJ8B,GAK9BC,SAAU,CACN0I,aADM,SACOxI,EAAOC,GAChBD,EAAMC,EAAOC,QAAQU,YAAcX,EAAOC,QAAQuI,OAEtDC,UAJM,SAII1I,EAAOC,GACbD,EAAMC,EAAOC,QAAQyI,KAAK/H,YAAYH,QAAQR,EAAOC,QAAQyI,OAEjEC,aAPM,SAOO5I,EAAOC,GAEhB,IAAM4I,EAAQ7I,EAAMC,EAAOC,QAAQU,YAAYkI,WAAU,SAAAC,GAAC,OAAIA,EAAE7J,KAAOe,EAAOC,QAAQZ,UACtFU,EAAMC,EAAOC,QAAQU,YAAYoI,OAAOH,EAAO,IAEnDI,mBAZM,SAYajJ,EAAOC,GAEtB,IAAM4I,EAAQ7I,EAAMC,EAAOC,QAAQU,YAAYkI,WAAU,SAAAC,GAAC,OAAIA,EAAE7J,KAAOe,EAAOC,QAAQZ,UACtFU,EAAMC,EAAOC,QAAQU,YAAYiI,GAAOhH,OAAS5B,EAAOC,QAAQ2B,QAEpEqH,kBAjBM,SAiBYlJ,EAAOC,GAErB,IAAM4I,EAAQ7I,EAAMC,EAAOC,QAAQU,YAAYkI,WAAU,SAAAC,GAAC,OAAIA,EAAE7J,KAAOe,EAAOC,QAAQZ,UACtFU,EAAMC,EAAOC,QAAQU,YAAYiI,GAAO7J,MAAQiB,EAAOC,QAAQa,WAGvEoI,cAAe,SAACC,GACZA,EAAQC,QAAQtJ,GAAkB,SAACC,EAAOC,GACtCA,EAAOC,QAAQC,UAAUmJ,SAAQ,SAAAjJ,GAAE,OAAIL,EAAMK,EAAGnB,IAAM,SAE1DkK,EAAQC,QAAQ7I,GAAe,SAACR,EAAOC,GACnCD,EAAMC,EAAOC,QAAQQ,SAASxB,IAAM,MAExCkK,EAAQC,QAAQ1I,GAAkB,SAACX,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQU,eAEhCwI,EAAQC,QAAQnI,GAAqB,SAAClB,EAAOC,GACzC,MAAO,SAMNsJ,GAAehB,GAAWnH,QAGhC,GAAuFmH,GAAWlH,QAA3FmH,GAAP,GAAOA,aAAcE,GAArB,GAAqBA,UAAWE,GAAhC,GAAgCA,aAAcK,GAA9C,GAA8CA,mBAAoBC,GAAlE,GAAkEA,kB,oBCvD5DM,GAAO5F,IAAMC,MAAK,YAA8F,IAAtE3E,EAAqE,EAArEA,GAAIF,EAAiE,EAAjEA,MAAO6C,EAA0D,EAA1DA,OAAQjB,EAAkD,EAAlDA,WAAYL,EAAsC,EAAtCA,qBAC5EgB,EAAW2B,cAQXuG,EAAkBC,uBAAY,SAAC3I,GACjCQ,EDmHyB,SAACjC,EAAgBsB,EAAoB5B,GAArC,8CAAuD,WAAOuC,EAAqCoI,GAA5C,mBAAAjF,EAAA,kEAEhFnD,EAASP,EAA6B,CAACC,OAAQL,EAAYL,qBAAsB,eAC3EoI,EAAOgB,IAAWlB,MAAM7H,GAAYgJ,MAAK,SAAAb,GAAC,OAAIA,EAAE7J,KAAOI,MAHmB,uBAKtEE,EAAQ,CACVR,QACA6K,YAAalB,EAAKkB,YAClBhI,OAAQ8G,EAAK9G,OACbiI,SAAUnB,EAAKmB,SACfC,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,UAXyD,SAa1DlL,EAAwB8B,EAAYtB,EAAQE,GAbc,OAchD,KADtBmF,EAbsE,QAcpElF,KAAKmF,YACTrD,EAAS2H,GAAkB,CAACtI,aAAYtB,SAAQyB,SAAU/B,KAC1DuC,EAASP,EAA6B,CAACC,OAAQL,EAAYL,qBAAsB,gBAEjFyB,EAA4B2C,EAAIlF,KAAM8B,EAAUX,GAlBwB,yDAsBhFqB,EAAmC,KAAIF,QAASR,EAAUX,GAtBsB,0DAAvD,wDCnHhBqJ,CAAkB/K,EAAI0B,EAAYG,MAC5C,CAACQ,EAAUX,EAAY1B,IAE1B,OACI,wBAAIoI,IAAKpI,EAAI+I,UAAS,UAAKC,KAAQgC,UAAb,YAAqC,IAAXrI,EAAeqG,KAAQiC,gBAAkB,KACrF,kBAAC9D,GAAA,EAAD,CAAUC,QAAoB,IAAXzE,EAAcoF,SAZd,SAACC,GACxB3F,ED+F0B,SAACjC,EAAgBsB,EAAoBiB,GAArC,8CAA8D,WAAON,EAAqCoI,GAA5C,mBAAAjF,EAAA,kEAExFnD,EAASP,EAA6B,CAACC,OAAQL,EAAYL,qBAAsB,eAC3EoI,EAAOgB,IAAWlB,MAAM7H,GAAYgJ,MAAK,SAAAb,GAAC,OAAIA,EAAE7J,KAAOI,MAH2B,uBAK9EE,EAAQ,CACVR,MAAO2J,EAAK3J,MACZ6K,YAAalB,EAAKkB,YAClBhI,SACAiI,SAAUnB,EAAKmB,SACfC,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,UAXiE,SAalElL,EAAwB8B,EAAYtB,EAAQE,GAbsB,OAcxD,KADtBmF,EAb8E,QAc5ElF,KAAKmF,YACTrD,EAAS0H,GAAmB,CAAC3J,SAAQsB,aAAYiB,YACjDN,EAASP,EAA6B,CAACC,OAAQL,EAAYL,qBAAsB,gBAEjFyB,EAA4B2C,EAAIlF,KAAM8B,EAAUX,GAlBgC,yDAsBxFqB,EAAmC,KAAIF,QAASR,EAAUX,GAtB8B,0DAA9D,wDC/FjBwJ,CAAmBlL,EAAI0B,EAAYsG,EAAEC,cAAcb,QAAUhI,EAAa+L,UAAY/L,EAAagM,OAWzCrE,MAAO,UAAWuB,SAAUjH,IAC3F,kBAACqH,GAAD,CAAc5I,MAAOA,EAAO6I,YAAa4B,EAAiBjC,SAAUjH,IACpE,kBAACkH,EAAA,EAAD,CAAYC,QAXM,WACtBnG,ED6EoB,SAACgJ,EAAgB3J,GAAjB,8CAAwC,WAAOW,GAAP,eAAAmD,EAAA,sEAE5DnD,EAASK,GAAe,CAACC,OAAQ,aAF2B,SAG1C/C,EAAwB8B,EAAY2J,GAHM,OAIhC,KADtB5F,EAHsD,QAIpDlF,KAAKmF,YACTrD,EAASqH,GAAa,CAACtJ,OAAQiL,EAAQ3J,gBACvCW,EAASK,GAAe,CAACC,OAAQ,gBAEjCP,EAAqBqD,EAAIlF,KAAM8B,GARyB,gDAW5DO,EAA4B,KAAIC,QAASR,GAXmB,yDAAxC,sDC7EXiJ,CAAatL,EAAI0B,KAUkB4G,SAAUjH,GAC9C,kBAACkK,GAAA,EAAD,WCTHC,GAAW9G,IAAMC,MAAK,SAAoClB,GACnE,IAAOzD,EAAmDyD,EAAnDzD,GAAIyL,EAA+ChI,EAA/CgI,cAAerK,EAAgCqC,EAAhCrC,OAAQC,EAAwBoC,EAAxBpC,qBAC5BgB,EAAW2B,cAGjB0H,qBAAU,WF4Cc,IAAChK,EE3CrBW,GF2CqBX,EE3CC1B,EF2CF,uCAAwB,WAAOqC,GAAP,eAAAmD,EAAA,sEAE5CnD,EAASK,GAAe,CAACC,OAAQ,aAFW,SAG1B/C,EAAsB8B,GAHI,OAGtC+D,EAHsC,OAI5CpD,EAASiH,GAAa,CAACC,MAAO9D,EAAIlF,KAAKoL,MAAOjK,gBAC9CW,EAASK,GAAe,CAACC,OAAQ,eALW,gDAO5CC,EAA4B,KAAIC,QAASR,GAPG,yDAAxB,0DE1CrB,CAACA,EAAUrC,IAEd,IAWI4L,EAXU9H,aAA0C,SAAAhD,GACpD,OAAQM,GACJ,IAAK,SACD,OAAON,EAAMyI,MAAMvJ,GAAIoB,QAAO,SAAAyI,GAAC,OAAiB,IAAbA,EAAElH,UACzC,IAAK,YACD,OAAO7B,EAAMyI,MAAMvJ,GAAIoB,QAAO,SAAAyI,GAAC,OAAiB,IAAbA,EAAElH,UACzC,QACI,OAAO7B,EAAMyI,MAAMvJ,OAILkB,KAAI,SAAA2I,GAC1B,OAAO,kBAACS,GAAD,CAAMlC,IAAKyB,EAAE7J,GAAKA,EAAIA,GAAI6J,EAAE7J,GAAI2C,OAAQkH,EAAElH,OAAQ7C,MAAO+J,EAAE/J,MAAO4B,WAAY1B,EAAIqB,qBAA+C,YAAzBA,OAQ7GwK,EAAsBrB,uBAAY,SAAC1K,GViDR,IAAC4B,EAAoBG,EUhDlDQ,GVgD8BX,EUhDC1B,EVgDmB6B,EUhDf/B,EVgDN,uCAA0C,WAAOuC,GAAP,eAAAmD,EAAA,sEAEvEnD,EAASP,EAA6B,CAACC,OAAQL,EAAYL,qBAAsB,aAFV,SAGrDzB,EAA4B8B,EAAYG,GAHa,OAI3C,KADtB4D,EAHiE,QAI/DlF,KAAKmF,YACTrD,EAAST,EAAsB,CAACF,aAAYG,cAC5CQ,EAASP,EAA6B,CAACC,OAAQL,EAAYL,qBAAsB,gBAEjFyB,EAA4B2C,EAAIlF,KAAM8B,EAAUX,GARmB,gDAWvEqB,EAAmC,KAAIF,QAASR,EAAUX,GAXa,yDAA1C,0DU/C9B,CAACW,EAAUrC,IAmBR8L,EAAwB,QAAX1K,EAAmB,iBAAc2K,EAC9CC,EAA2B,WAAX5K,EAAsB,iBAAc2K,EACpDE,EAA8B,cAAX7K,EAAyB,iBAAc2K,EAEhE,OACI,6BACI,4BACI,kBAACrD,GAAD,CAAc5I,MAAO2L,EAAe9C,YAAakD,EAAqBvD,SAAmC,YAAzBjH,IAChF,kBAACkH,EAAA,EAAD,CAAYC,QAjCD,WACnBnG,EVqCwB,SAACrC,GAAD,8CAAgB,WAAOqC,GAAP,eAAAmD,EAAA,sEAExCnD,EAASK,GAAe,CAACC,OAAQ,aAFO,SAGtB/C,EAA4BI,GAHN,OAIZ,KADtByF,EAHkC,QAIhClF,KAAKmF,YACTrD,EAASZ,EAAiB,CAACC,WAAY1B,KACvCqC,EAASK,GAAe,CAACC,OAAQ,gBAEjCP,EAAqBqD,EAAIlF,KAAM8B,GARK,gDAWxCO,EAA4B,KAAIC,QAASR,GAXD,yDAAhB,sDUrCf6J,CAAiBlM,KAgCmBsI,SAAmC,YAAzBjH,GAC3C,kBAACkK,GAAA,EAAD,QAGR,kBAAC,GAAD,CAAa5D,QAjBL,SAAC7H,GFeI,IAACO,EAAmBqB,EEdrCW,GFckBhC,EEdCP,EFckB4B,EEdX1B,EFcT,uCAA2C,WAAOqC,GAAP,eAAAmD,EAAA,sEAE5DnD,EAASK,GAAe,CAACC,OAAQ,aAF2B,SAG1C/C,EAAwB8B,EAAYrB,GAHM,OAIhC,KADtBoF,EAHsD,QAIpDlF,KAAKmF,YACTrD,EAASmH,GAAU,CAACC,KAAMhE,EAAIlF,KAAKA,KAAKyF,QACxC3D,EAASK,GAAe,CAACC,OAAQ,gBAEjCP,EAAqBqD,EAAIlF,KAAM8B,GARyB,gDAW5DO,EAA4B,KAAIC,QAASR,GAXmB,yDAA3C,yDEEkBiG,SAAmC,YAAzBjH,IACzC,6BACKuK,GAEL,6BACI,kBAACvE,EAAA,EAAD,CAAQN,MAAM,UAAUpD,QAASmI,EAAYhF,MAAO,CAACqF,UAAW,OACxD3D,QAlCM,WACtBnG,EAASV,EAAuB,CAACP,OAAQ,MAAOM,WAAY1B,OAgCpD,OAEA,kBAACqH,EAAA,EAAD,CAAQN,MAAM,UAAUpD,QAASqI,EAAelF,MAAO,CAACqF,UAAW,OAC3D3D,QAjCU,WAC1BnG,EAASV,EAAuB,CAACP,OAAQ,SAAUM,WAAY1B,OA+BvD,UAEA,kBAACqH,EAAA,EAAD,CAAQN,MAAM,UAAUpD,QAASsI,EAAkBnF,MAAO,CAACqF,UAAW,OAC9D3D,QAhCY,WAC5BnG,EAASV,EAAuB,CAACP,OAAQ,YAAaM,WAAY1B,OA8B1D,kBCvFHoM,GAAqB1H,IAAMC,MAAK,WACzC,IAAMtC,EAAW2B,cACX/C,EAAY6C,aAAoD,SAAAhD,GAAK,OAAIA,EAAMG,aAC/EgC,EAAaa,aAAuC,SAAAhD,GAAK,OAAIA,EAAM8D,KAAK3B,cAExEoJ,EAAc7B,uBAAY,SAACiB,GX0DR,IAAC3L,EWzDtBuC,GXyDsBvC,EWzDC2L,EXyDF,uCAAmB,WAAOpJ,GAAP,eAAAmD,EAAA,sEAExCnD,EAASK,GAAe,CAACC,OAAQ,aAFO,SAGtB/C,EAA4BE,GAHN,OAIZ,KADtB2F,EAHkC,QAIhClF,KAAKmF,YACTrD,EAASf,EAAc,CAACE,SAAUiE,EAAIlF,KAAKA,KAAKyF,QAChD3D,EAASK,GAAe,CAACC,OAAQ,gBAEjCP,EAAqBqD,EAAIlF,KAAM8B,GARK,gDAWxCO,EAA4B,KAAIC,QAASR,GAXD,yDAAnB,0DWxDtB,CAACA,IAWJ,GARAqJ,qBAAU,WACDzI,GAGLZ,EXsCwB,uCAAM,WAAOA,GAAP,eAAAmD,EAAA,sEAE9BnD,EAASK,GAAe,CAACC,OAAQ,aAFH,SAGZ/C,IAHY,OAGxB6F,EAHwB,OAI9BpD,EAASxB,EAAiB,CAACI,UAAWwE,EAAIlF,QAC1C8B,EAASK,GAAe,CAACC,OAAQ,eALH,gDAO9BC,EAA4B,KAAIC,QAASR,GAPX,yDAAN,yDWrCzB,CAACA,EAAUY,KAGTA,EACD,OAAO,kBAAC,KAAD,CAAU2C,GAAI,WAIzB,IAAM0G,EAAsBrL,EAAUC,KAAI,SAAAC,GAClC,OACI,kBAAC0E,GAAA,EAAD,CAAMuC,IAAKjH,EAAGnB,GAAIgG,MAAI,EAACc,MAAO,CAACyF,UAAW,eACtC,kBAACC,GAAA,EAAD,CAAO1F,MAAO,CAAC2F,QAAS,SACpB,kBAAC,GAAD,CACIzM,GAAImB,EAAGnB,GACPyL,cAAetK,EAAGrB,MAClBsB,OAAQD,EAAGC,OACXC,qBAAsBF,EAAGE,4BAOjD,OACI,oCACI,kBAACwE,GAAA,EAAD,CAAMC,WAAS,EAACgB,MAAO,CAAC2F,QAAS,OAAQC,eAAgB,WACrD,kBAAC,GAAD,CAAa/E,QAAS0E,KAE1B,kBAACxG,GAAA,EAAD,CAAMC,WAAS,EAAC6G,QAAS,EAAG7F,MAAO,CAAC4F,eAAgB,WAC/CJ,OClCXM,GAAYC,cAAW,SAACC,GAAD,MAAY,CACrCC,SAAU,CACNC,OAAQF,EAAME,OAAOC,OAAS,EAC9BlG,MAAO,YAyDAmG,GArDHxI,IAAMC,MAAK,WACnB,IAAMqE,EAAU4D,KACVvK,EAAW2B,cACXrB,EAASmB,aAAiD,SAAAhD,GAAK,OAAIA,EAAMiD,IAAIpB,UAC7EU,EAAgBS,aAAwC,SAAAhD,GAAK,OAAIA,EAAMiD,IAAIV,iBAC3EJ,EAAaa,aAAwC,SAAAhD,GAAK,OAAIA,EAAM8D,KAAK3B,cAEzEkK,EAAS3C,uBAAY,WACvBnI,EV0BgB,uCAAM,WAAOA,GAAP,eAAAmD,EAAA,sEAEtBnD,EAASK,GAAe,CAACC,OAAQ,aAFX,SAGJ/C,IAHI,OAIM,KADtB6F,EAHgB,QAIdlF,KAAKmF,YACTrD,EAASa,GAAgB,CAACD,YAAY,KACtCZ,EAASK,GAAe,CAACC,OAAQ,eACjCN,EAASL,MAETI,EAAqBqD,EAAIlF,KAAM8B,GATb,gDAYtBO,EAA4B,KAAIC,QAASR,GAZnB,yDAAN,yDUzBjB,CAACA,IAMJ,OAJAqJ,qBAAU,WACNrJ,ETCuB,uCAAM,WAAOA,GAAP,SAAAmD,EAAA,sEAE7BnD,EAASK,GAAe,CAACC,OAAQ,aAFJ,SAGX/C,IAHW,OAID,IAJC,OAIrBW,KAAKmF,YACTrD,EAASa,GAAgB,CAACD,YAAY,KACtCZ,EAASK,GAAe,CAACC,OAAQ,gBAEjCN,EAASK,GAAe,CAACC,OAAQ,eARR,gDAW7BC,EAA4B,KAAIC,QAASR,GAXZ,yBAa7BA,EAASiB,GAAa,CAACD,eAAe,KAbT,4EAAN,yDSAxB,CAAChB,IAECgB,EAQD,yBAAK0F,UAAU,OACX,kBAACnF,GAAD,MACA,kBAACwJ,EAAA,EAAD,CAAU/I,KAAiB,YAAX1B,EAAsBoG,UAAWC,EAAQ+D,UAAU,kBAACM,EAAA,EAAD,CAAkBtG,MAAO,UAAWc,KAAM,MAC7G,kBAACyF,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAAS1G,MAAO,CAAC4F,eAAgB,kBAC7B,kBAACnE,EAAA,EAAD,CAAYkF,KAAK,QAAQ1G,MAAM,UAAU2G,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYjK,QAAQ,MAApB,YAGCV,EACK,kBAACoE,EAAA,EAAD,CAAQN,MAAM,UAAUyB,QAAS2E,GAAjC,UACA,kBAAC9F,EAAA,EAAD,CAAQP,MAAO,CAACC,MAAO,SAAUuB,UAAU,GAA3C,WAId,kBAACuF,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,uBAAwBC,OAAQ,kBAAM,kBAAC7B,GAAD,SACzD,kBAAC,KAAD,CAAO4B,KAAM,SAAUC,OAAQ,kBAAM,kBAACxJ,GAAD,SACrC,kBAAC,KAAD,CAAOuJ,KAAM,OAAQC,OAAQ,kBAAM,wBAAInH,MAAO,CAACoH,UAAW,WAAvB,0BACnC,kBAAC,KAAD,CAAUH,OAAK,EAACI,KAAM,IAAKvI,GAAI,yBAC/B,kBAAC,KAAD,CAAUuI,KAAM,IAAKvI,GAAI,YA9B9B,yBACHkB,MAAO,CAACyG,SAAU,QAASa,IAAK,MAAOF,UAAW,SAAUG,MAAO,SACnE,kBAAChB,EAAA,EAAD,U,kBClCNiB,GAAcC,aAAgB,CAChChF,MAAOc,GACPpJ,UAAWgB,EACX8B,IAAKR,GACLqB,KAAMzB,IAIGqL,GAAQC,YAAe,CAChCvM,QAASoM,GACTI,WAAY,SAACC,GAAD,OACRA,IAAuBC,QAAQC,SAUvC7P,OAAOwP,MAAQA,G,aCxBfM,IAASb,OACL,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAUO,MAAOA,IACb,kBAAC,GAAD,QAGRO,SAASC,eAAe,ShB4HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9M,GACL+M,QAAQ/M,MAAMA,EAAMI,a,mBiBhJ5B4M,EAAOC,QAAU,CAAC,WAAa,iCAAiC,MAAQ,8B,mBCAxED,EAAOC,QAAU,CAAC,OAAS,qBAAqB,UAAY,2B","file":"static/js/main.a1a10339.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd54d3622-f03b-45b2-9f0a-fa6f5f4405c5'\r\n    }\r\n})\r\n\r\nexport const todoListsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodoListType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    //tasks requests\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n    //auth requests\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType | {}>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}","import {todoListsAPI, TodoListType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"./app-reducer\";\r\nimport {UnionActionType} from \"./action-types\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerAppNetworkError,\r\n    handleServerTodoEntityError,\r\n    handleServerTodoEntityNetworkError\r\n} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//local types\r\nexport type TodoListEntityType = TodoListType & {\r\n    filter: FilterValueType,\r\n    todoListEntityStatus: RequestStatusType\r\n}\r\nexport type FilterValueType = 'all' | 'completed' | 'active'\r\n\r\n//init state\r\nconst initState: TodoListEntityType[] = []\r\n\r\nconst todoListsSlice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: initState,\r\n    reducers: {\r\n        fetchTodoListsAC(state, action: PayloadAction<{todoLists: TodoListType[]}>) {\r\n            return action.payload.todoLists.map(tl => ({...tl, filter: 'all', todoListEntityStatus: 'idle'}))\r\n        },\r\n        addTodoListAC(state, action: PayloadAction<{todoList: TodoListType}>) {\r\n            state.unshift({...action.payload.todoList, filter: 'all', todoListEntityStatus: 'idle'})\r\n        },\r\n        deleteTodoListAC(state, action: PayloadAction<{todoListId: string}>) {\r\n            return state.filter(tl => tl.id !== action.payload.todoListId)\r\n        },\r\n        changeTodoListFilterAC(state, action: PayloadAction<{filter: FilterValueType, todoListId: string}>) {\r\n            return state.map(tl => tl.id === action.payload.todoListId ? {...tl, filter: action.payload.filter} : tl)\r\n        },\r\n        changeTodoListTitleAC(state, action: PayloadAction<{todoListId: string, newTitle: string}>) {\r\n            return state.map(tl => tl.id === action.payload.todoListId ? {...tl, title: action.payload.newTitle} : tl)\r\n        },\r\n        changeTodoListEntityStatusAC(state, action: PayloadAction<{todoId: string, todoListEntityStatus: RequestStatusType}>) {\r\n            return state.map(tl => tl.id === action.payload.todoId ? {...tl, todoListEntityStatus: action.payload.todoListEntityStatus} : tl)\r\n        },\r\n        clearDataOnLogoutAC() {\r\n            return []\r\n        }\r\n    }\r\n})\r\n\r\n//reducer\r\nexport const todoListReducer = todoListsSlice.reducer\r\n//actions\r\nexport const {\r\n    fetchTodoListsAC,\r\n    addTodoListAC,\r\n    deleteTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    changeTodoListEntityStatusAC,\r\n    clearDataOnLogoutAC} = todoListsSlice.actions\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = () => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const res = await todoListsAPI.getTodoLists()\r\n        dispatch(fetchTodoListsAC({todoLists: res.data}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const res = await todoListsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTodoListAC({todoList: res.data.data.item}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n\r\n}\r\n\r\nexport const deleteTodoListTC = (id: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const res = await todoListsAPI.deleteTodolist(id)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(deleteTodoListAC({todoListId: id}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, newTitle: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC({todoId: todoListId, todoListEntityStatus: 'loading'}))\r\n        const res = await todoListsAPI.updateTodolist(todoListId, newTitle)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(changeTodoListTitleAC({todoListId, newTitle}))\r\n            dispatch(changeTodoListEntityStatusAC({todoId: todoListId, todoListEntityStatus: 'succeeded'}))\r\n        } else {\r\n            handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n        }\r\n    } catch (err: any) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from \"../state/app-reducer\";\r\nimport {changeTodoListEntityStatusAC} from \"../state/todolist-reducer\";\r\nimport {SetAppStatusAT, SetAppErrorAT} from \"../state/action-types\";\r\nimport {ChangeTodoListEntityStatusAT} from \"../state/action-types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/api\";\r\n\r\n//errors for whole app (backdrop)\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'unexpected error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerAppNetworkError = (message: string, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC({error: message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n//errors for todoListEntity\r\nexport const handleServerTodoEntityError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType, todoId: string) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'unexpected error occurred'}))\r\n    }\r\n    dispatch(changeTodoListEntityStatusAC({todoId, todoListEntityStatus: 'failed'}))\r\n}\r\n\r\nexport const handleServerTodoEntityNetworkError = (message: string, dispatch: ErrorUtilsDispatchType, todoId: string) => {\r\n    dispatch(setAppErrorAC({error: message}))\r\n    dispatch(changeTodoListEntityStatusAC({todoId, todoListEntityStatus: 'failed'}))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppStatusAT | SetAppErrorAT | ChangeTodoListEntityStatusAT>","import {UnionActionType} from \"./action-types\";\r\nimport {LoginParamsType, todoListsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerAppNetworkError} from \"../utils/error-utils\";\r\nimport {clearDataOnLogoutAC} from \"./todolist-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//local types\r\n// type InitStateType = typeof initState\r\n\r\n//init state\r\nconst initState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initState,\r\n    reducers: {\r\n        //make reducers name as AC's so interface stays the same for the whole app\r\n        //immer js looks like it mutates state but it doesnt cause state in params is actually state draft\r\n        setIsLoggedInAC(state, action: PayloadAction<{isLoggedIn: boolean}>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\n\r\n//reducer\r\nexport const authReducer = authSlice.reducer\r\nexport const setIsLoggedInAC = authSlice.actions.setIsLoggedInAC\r\n// export const authReducer = (state: InitStateType = initState, action: UnionActionType): InitStateType => {\r\n//     switch (action.type) {\r\n//         case \"auth/SET-IS-LOGGED-IN\": {\r\n//             return {...state, isLoggedIn: action.isLoggedIn}\r\n//         }\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\n//actions\r\n// export const setIsLoggedInAC = (isLoggedIn: boolean) => {\r\n//     return {type: 'auth/SET-IS-LOGGED-IN', isLoggedIn} as const\r\n// }\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todoListsAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn: true}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todoListsAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn: false}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(clearDataOnLogoutAC())\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n","import {UnionActionType} from \"./action-types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppNetworkError} from \"../utils/error-utils\";\r\nimport {todoListsAPI} from \"../api/api\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//local types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n//init state\r\nconst initState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\n//slice redux toolkit\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: initState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\n//reducer\r\nexport const appReducer = appSlice.reducer\r\n\r\n//actions\r\nexport const {setAppStatusAC, setAppErrorAC, setAppInitAC} = appSlice.actions\r\n\r\n//thunks\r\nexport const initializeAppTC = () => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todoListsAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({isLoggedIn: true}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        }\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    } finally {\r\n        dispatch(setAppInitAC({isInitialized: true}))\r\n    }\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const appSnackbarError = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={appSnackbarError !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {appSnackbarError}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../state/auth-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype LoginFormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = React.memo(function LoginComponent() {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: LoginFormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Field is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Field is required'\r\n            } else if(values.password.length < 4) {\r\n                errors.password = 'password has to be at least 4 characters'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    //redirect if logged in\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/todo-list-solo-redo'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify={'center'}>\r\n            <Grid item xs={3}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in please register\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'} rel={'noopener noreferrer'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.errors.email && formik.touched.email && <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.errors.password && formik.touched.password && <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function AddItemForm(props: AddItemFormType) {\r\n    //local input state\r\n    const [inputValue, setInputValue] = useState('')\r\n    //local error state\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onBlurErrorFalse = () => {\r\n        if(error !== null) setError(null)\r\n    }\r\n    //add task or todolist based on callback\r\n    const addItem = () => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addItem(inputValue.trim())\r\n            setInputValue('')\r\n        } else {\r\n            setError('Title required')\r\n        }\r\n    }\r\n\r\n    const onEnterPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    //input value flux changer\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                error={!!error}\r\n                value={inputValue}\r\n                onChange={onChangeTitle}\r\n                onBlur={onBlurErrorFalse}\r\n                onKeyPress={onEnterPressAddTask}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color='primary' onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from './EditableSpan.module.css'\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function EditableSpanComponent({title, changeTitle, disabled}: EditableSpanType) {\r\n    //editMode for span local state\r\n    const [editMode, setEditMode] = useState(false)\r\n    //title local state\r\n    const [taskTitle, setTaskTitle] = useState(title)\r\n    //local error state for input\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeTaskTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onDoubleClickOnEditMode = () => {\r\n        if (!disabled) {\r\n            if (taskTitle !== title) {\r\n                setTaskTitle(title)\r\n            }\r\n            setEditMode(true)\r\n        }\r\n    }\r\n\r\n    const onBlurOffEditMode = () => {\r\n        if (taskTitle !== '') {\r\n            setEditMode(false)\r\n            changeTitle(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onEnterPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (taskTitle !== '') {\r\n            if (e.key === \"Enter\") {\r\n                setEditMode(false)\r\n                changeTitle(taskTitle)\r\n            }\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    //conditional rendering of span or input field\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                className={`${classes.inputField} ${error ? classes.error : ''}`}\r\n                autoFocus\r\n                value={taskTitle}\r\n                onBlur={onBlurOffEditMode}\r\n                onKeyPress={onEnterPressOffEditMode}\r\n                onChange={onChangeTaskTitle}\r\n                placeholder={error ? 'please enter title' : ''}\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                error={error}/>\r\n            : <span onDoubleClick={onDoubleClickOnEditMode}>{title}</span>\r\n    )\r\n})","import {TaskStatuses, TaskType, todoListsAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {UnionActionType} from \"./action-types\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListEntityStatusAC, clearDataOnLogoutAC,\r\n    deleteTodoListAC,\r\n    fetchTodoListsAC,\r\n} from \"./todolist-reducer\";\r\nimport {\r\n    handleServerAppError,\r\n    handleServerAppNetworkError,\r\n    handleServerTodoEntityError,\r\n    handleServerTodoEntityNetworkError\r\n} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//local types\r\ntype TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\n//init state\r\nconst initState: TasksStateType = {}\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initState,\r\n    reducers: {\r\n        fetchTasksAC(state, action: PayloadAction<{tasks: TaskType[], todoListId: string}>) {\r\n            state[action.payload.todoListId] = action.payload.tasks\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        deleteTaskAC(state, action: PayloadAction<{taskId: string, todoListId: string}>) {\r\n            //state[action.payload.todoListId].filter(t => t.id !== action.payload.taskId) - does not work with r-toolkit\r\n            const index = state[action.payload.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n            state[action.payload.todoListId].splice(index, 1)\r\n        },\r\n        changeTaskStatusAC(state, action: PayloadAction<{taskId: string, todoListId: string, status: TaskStatuses}>) {\r\n            //state[action.payload.todoListId].map(t => t.id === action.payload.taskId ? {...t, status: action.payload.status} : t) - does not work with r-toolkit\r\n            const index = state[action.payload.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n            state[action.payload.todoListId][index].status = action.payload.status\r\n        },\r\n        changeTaskTitleAC(state, action: PayloadAction<{todoListId: string, taskId: string, newTitle: string}>) {\r\n            //state[action.payload.todoListId].map(t => t.id === action.payload.taskId ? {...t, title: action.payload.newTitle} : t) - does not work with r-toolkit\r\n            const index = state[action.payload.todoListId].findIndex(t => t.id === action.payload.taskId)\r\n            state[action.payload.todoListId][index].title = action.payload.newTitle\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodoListsAC, (state, action) => {\r\n            action.payload.todoLists.forEach(tl => state[tl.id] = [])\r\n        });\r\n        builder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.todoList.id] = []\r\n        });\r\n        builder.addCase(deleteTodoListAC, (state, action) => {\r\n            delete state[action.payload.todoListId]\r\n        });\r\n        builder.addCase(clearDataOnLogoutAC, (state, action) => {\r\n            return {}\r\n        });\r\n    },\r\n})\r\n\r\n//reducer\r\nexport const tasksReducer = tasksSlice.reducer\r\n\r\n//actions\r\nexport const {fetchTasksAC, addTaskAC, deleteTaskAC, changeTaskStatusAC, changeTaskTitleAC} = tasksSlice.actions\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const res = await todoListsAPI.getTasks(todoListId)\r\n        dispatch(fetchTasksAC({tasks: res.data.items, todoListId}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (taskTitle: string, todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const res = await todoListsAPI.createTask(todoListId, taskTitle)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC({task: res.data.data.item}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (taskID: string, todoListId: string) => async (dispatch: Dispatch<UnionActionType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const res = await todoListsAPI.deleteTask(todoListId, taskID)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(deleteTaskAC({taskId: taskID, todoListId}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err: any) {\r\n        handleServerAppNetworkError(err.message, dispatch)\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusTC = (taskId: string, todoListId: string, status: TaskStatuses) => async (dispatch: Dispatch<UnionActionType>, getState: () => AppRootStateType) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC({todoId: todoListId, todoListEntityStatus: 'loading'}))\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline\r\n            }\r\n            const res = await todoListsAPI.updateTask(todoListId, taskId, model)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTaskStatusAC({taskId, todoListId, status}))\r\n                dispatch(changeTodoListEntityStatusAC({todoId: todoListId, todoListEntityStatus: 'succeeded'}))\r\n            } else {\r\n                handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n            }\r\n        }\r\n    } catch (err: any) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (taskId: string, todoListId: string, title: string) => async (dispatch: Dispatch<UnionActionType>, getState: () => AppRootStateType) => {\r\n    try {\r\n        dispatch(changeTodoListEntityStatusAC({todoId: todoListId, todoListEntityStatus: 'loading'}))\r\n        const task = getState().tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model = {\r\n                title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline\r\n            }\r\n            const res = await todoListsAPI.updateTask(todoListId, taskId, model)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTaskTitleAC({todoListId, taskId, newTitle: title}))\r\n                dispatch(changeTodoListEntityStatusAC({todoId: todoListId, todoListEntityStatus: 'succeeded'}))\r\n            } else {\r\n                handleServerTodoEntityError(res.data, dispatch, todoListId)\r\n            }\r\n        }\r\n    } catch (err: any) {\r\n        handleServerTodoEntityNetworkError(err.message, dispatch, todoListId)\r\n    }\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport classes from './Task.module.css'\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeTaskStatusTC, changeTaskTitleTC, deleteTaskTC} from \"../../state/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/api\";\r\n\r\ntype TaskPropsType = {\r\n    id: string\r\n    title: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n    todoListEntityStatus: boolean\r\n}\r\n\r\nexport const Task = React.memo(function TaskComponent({id, title, status, todoListId, todoListEntityStatus}: TaskPropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changeTaskStatusTC(id, todoListId, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New))\r\n    }\r\n    const onClickDeleteTask = () => {\r\n        dispatch(deleteTaskTC(id, todoListId))\r\n    }\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        dispatch(changeTaskTitleTC(id, todoListId, newTitle))\r\n    }, [dispatch, todoListId, id])\r\n\r\n    return (\r\n        <li key={id} className={`${classes.liElement} ${status === 2 ? classes.isDoneClassName : ''}`}>\r\n            <Checkbox checked={status === 2} onChange={onChangeTaskStatus} color={\"primary\"} disabled={todoListEntityStatus}/>\r\n            <EditableSpan title={title} changeTitle={changeTaskTitle} disabled={todoListEntityStatus}/>\r\n            <IconButton onClick={onClickDeleteTask} disabled={todoListEntityStatus}>\r\n                <Delete />\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport './TodoList.css'\r\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../editableSpan/EditableSpan\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {addTaskTC, fetchTasksTC} from \"../../state/tasks-reducer\";\r\nimport {\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleTC,\r\n    deleteTodoListTC,\r\n    FilterValueType,\r\n} from \"../../state/todolist-reducer\";\r\nimport {Task} from \"../taskComponent/Task\";\r\nimport {TaskType} from \"../../api/api\";\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    todoListTitle: string\r\n    filter: FilterValueType\r\n    todoListEntityStatus: RequestStatusType\r\n}\r\n\r\nexport const TodoList = React.memo(function TodoListWithHooksComponent(props: TodoListPropsType) {\r\n    const {id, todoListTitle, filter, todoListEntityStatus} = props;\r\n    const dispatch = useDispatch()\r\n\r\n    //fetching tasks\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(id))\r\n    }, [dispatch, id])\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => {\r\n        switch (filter) {\r\n            case \"active\":\r\n                return state.tasks[id].filter(t => t.status === 0)\r\n            case \"completed\":\r\n                return state.tasks[id].filter(t => t.status === 2)\r\n            default:\r\n                return state.tasks[id]\r\n        }\r\n    })\r\n\r\n    let tasksElements = tasks.map(t => {\r\n        return <Task key={t.id + id} id={t.id} status={t.status} title={t.title} todoListId={id} todoListEntityStatus={todoListEntityStatus === 'loading'}/>\r\n    })\r\n\r\n    //deleting todolist entity\r\n    const deleteTodoList = () => {\r\n        dispatch(deleteTodoListTC(id))\r\n    }\r\n    //changeTodoListTitle\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoListTitleTC(id, title))\r\n    }, [dispatch, id])\r\n\r\n    //todoList filter callbacks\r\n    const onChangeFilterAll = () => {\r\n        dispatch(changeTodoListFilterAC({filter: 'all', todoListId: id}))\r\n    }\r\n    const onChangeFilterAActive = () => {\r\n        dispatch(changeTodoListFilterAC({filter: 'active', todoListId: id}))\r\n    }\r\n    const onChangeFilterCompleted = () => {\r\n        dispatch(changeTodoListFilterAC({filter: 'completed', todoListId: id}))\r\n    }\r\n\r\n    //add task\r\n    const addTask = (title: string) => {\r\n        dispatch(addTaskTC(title, id))\r\n    }\r\n\r\n    // variants for buttons based on filter value\r\n    const allVariant = filter === \"all\" ? \"contained\" : undefined\r\n    const activeVariant = filter === \"active\" ? \"contained\" : undefined\r\n    const completedVariant = filter === \"completed\" ? \"contained\" : undefined\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={todoListTitle} changeTitle={changeTodoListTitle} disabled={todoListEntityStatus === 'loading'}/>\r\n                <IconButton onClick={deleteTodoList} disabled={todoListEntityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={todoListEntityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksElements}\r\n            </div>\r\n            <div>\r\n                <Button color=\"primary\" variant={allVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAll}>All</Button>\r\n                <Button color=\"primary\" variant={activeVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterAActive}>Active</Button>\r\n                <Button color=\"primary\" variant={completedVariant} style={{marginTop: '3px'}}\r\n                        onClick={onChangeFilterCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../addItemForm/AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addTodoListTC, fetchTodoListsTC, TodoListEntityType} from \"../../state/todolist-reducer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {TodoList} from \"../todolistComponent/TodoList\";\r\n\r\n//this component was created just for routing purposes\r\nexport const TodoListsContainer = React.memo(function TodoListsContainerComponent() {\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootStateType, TodoListEntityType[]>(state => state.todoLists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const addTodoList = useCallback((todoListTitle: string) => {\r\n        dispatch(addTodoListTC(todoListTitle))\r\n    }, [dispatch])\r\n\r\n    //fetching todos\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch, isLoggedIn])\r\n\r\n    //redirect if is not logged in\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    //todos view\r\n    const todoListJSXElements = todoLists.map(tl => {\r\n            return (\r\n                <Grid key={tl.id} item style={{wordBreak: 'break-word'}}>\r\n                    <Paper style={{padding: '10px'}}>\r\n                        <TodoList\r\n                            id={tl.id}\r\n                            todoListTitle={tl.title}\r\n                            filter={tl.filter}\r\n                            todoListEntityStatus={tl.todoListEntityStatus}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px', justifyContent: 'center'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3} style={{justifyContent: 'center'}}>\r\n                {todoListJSXElements}\r\n            </Grid>\r\n        </>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./state/app-reducer\";\r\nimport {ErrorSnackbar} from \"./components/errorSnackbar/ErrorSnackbar\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {Login} from \"./components/login/Login\";\r\nimport {TodoListsContainer} from \"./components/todolists-container/TodoListsContainer\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {logoutTC} from \"./state/auth-reducer\";\r\n\r\n//this is for loading screen\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nconst App = React.memo(function AppWithReduxComponent() {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>( state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( state => state.auth.isLoggedIn)\r\n\r\n    const logout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <Backdrop open={status === 'loading'} className={classes.backdrop}><CircularProgress color={'primary'} size={70}/></Backdrop>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    {isLoggedIn\r\n                        ? <Button color=\"inherit\" onClick={logout}>Logout</Button>\r\n                        : <Button style={{color: \"white\"}} disabled={true}>Login</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/todo-list-solo-redo'} render={() => <TodoListsContainer/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1 style={{textAlign: \"center\"}}>404: Page not found</h1>}/>\r\n                    <Redirect exact from={'/'} to={'/todo-list-solo-redo'}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListReducer} from './todolist-reducer';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"EditableSpan_inputField__3qIHy\",\"error\":\"EditableSpan_error__26IDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"Task_isDone__1B-ow\",\"liElement\":\"Task_liElement__2oSik\"};"],"sourceRoot":""}